import logging

import mysql.connector

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

import db

API_TOKEN = '5626939602:AAHRuLoS6EaWY1OfVHdIn0tBYeLzC6ZZY1k'

bot = Bot(token=API_TOKEN, parse_mode='HTML')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
logging.basicConfig(level=logging.INFO)


class Form(StatesGroup):
    subject = State()
    teacher = State()
    info = State()

    update_subject = State()
    update_teacher = State()
    delete_subject = State()
    delete_teacher = State()

    create_queue_st = State()
    clear_queue_st = State()
    delete_queue_st = State()

    show_queue_st = State()
    start_queue_st = State()


# @dp.message_handler(commands='start')
# async def start(message: types.Message):
#     chat_name = 'user'
#     # chat_name = message['chat']['first_name']
#     # how to get chat_name in chat and use it in answer?
#     await message.answer(f'hello, {chat_name}')


@dp.message_handler(commands='help')
async def help(message: types.Message):
    text = '‚öô –í—Å—ñ –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ <b>Q Bot KPI</b>:\n' \
           '\n/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞ –¥–ª—è —Ü—ñ—î—ó –≥—Ä—É–ø–∏' \
           '\n/help ‚Äî –≤–∏–≤–µ—Å—Ç–∏ –≤—Å—ñ –∫–æ–º–∞–Ω–¥–∏' \
           '\n/back ‚Äî –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é, –∫–æ–ª–∏ –±–æ—Ç –æ—á—ñ–∫—É—î —è–∫—ñ—Å—å –¥–∞–Ω—ñ' \
           '\n/all_students ‚Äî –≤–∏–≤–µ—Å—Ç–∏ –≤—Å—ñ—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤' \
           '\n/all_subjects ‚Äî –≤–∏–≤–µ—Å—Ç–∏ –≤—Å—ñ –ø—Ä–µ–¥–º–µ—Ç–∏' \
           '\n/all_teachers ‚Äî –≤–∏–≤–µ—Å—Ç–∏ –≤—Å—ñ—Ö –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤' \
           '\n/add_subject ‚Äî –¥–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç' \
           '\n/add_teacher ‚Äî –¥–æ–¥–∞—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á–∞' \
           '\n/add_teacher_info ‚Äî –¥–æ–¥–∞—Ç–∏ –∞–±–æ –æ–Ω–æ–≤–∏—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∏–∫–ª–∞–¥–∞—á–∞' \
           '\n/update_subject ‚Äî –æ–Ω–æ–≤–∏—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç' \
           '\n/update_teacher ‚Äî –æ–Ω–æ–≤–∏—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á–∞' \
           '\n/delete_subject ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç' \
           '\n/delete_teacher ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á–∞' \
           '\n/create_queue ‚Äî —Å—Ç–≤–æ—Ä–∏—Ç–∏ —á–µ—Ä–≥—É –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç' \
           '\n/clear_queue ‚Äî –æ—á–∏—Å—Ç–∏—Ç–∏ —á–µ—Ä–≥—É –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç' \
           '\n/delete_queue ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ —á–µ—Ä–≥—É –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç' \
           '\n/show_needed_queue ‚Äî –≤–∏–≤–µ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É —á–µ—Ä–≥—É' \
           '\n/start_queue ‚Äî —Ä–æ–∑–ø–æ—á–∞—Ç–∏ —á–µ—Ä–≥—É –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç' \
           '\n/next ‚Äî –∑–¥—ñ–π—Å–Ω–∏—Ç–∏ —Ä—É—Ö —á–µ—Ä–≥–∏' \
           '\n/show_current_student ‚Äî –¥—ñ–∑–Ω–∞—Ç–∏—Å—è, —Ö—Ç–æ –∑–¥–∞—î –∑–∞—Ä–∞–∑' \
           '\n/set_max <i>{—á–∏—Å–ª–æ}</i> ‚Äî –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –¥–æ–≤–∂–∏–Ω—É —á–µ—Ä–≥–∏' \
           '\n/sign_up <i>{–Ω–æ–º–µ—Ä –∞–±–æ –Ω–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç—É} {–ø–æ–∑–∏—Ü—ñ—è –≤ —á–µ—Ä–∑—ñ (–∑–∞ –±–∞–∂–∞–Ω–Ω—è–º)}</i> ‚Äî ' \
           '–∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –≤ —á–µ—Ä–≥—É –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç' \
           '\n/sign_out <i>{–Ω–æ–º–µ—Ä –∞–±–æ –Ω–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç—É}</i> ‚Äî –≤–∏–ø–∏—Å–∞—Ç–∏—Å—è –∑ —á–µ—Ä–≥–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç' \
           '\n/skip <i>{–∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: 1)}</i> ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –ø–µ–≤–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª—é–¥–µ–π –≤–ø–µ—Ä–µ–¥'
    await message.answer(text)


# @dp.message_handler(commands='end')
# async def end(message: types.Message):
#     print('Start deleting DB...')
#     sql_command = """DROP TABLE IF EXISTS `{group_id}`.`teachers` ;"""
#     db.my_cursor.execute(sql_command)
#     sql_command = """DROP TABLE IF EXISTS `{group_id}`.`Sign_ups` ;"""
#     db.my_cursor.execute(sql_command)
#     sql_command = """DROP TABLE IF EXISTS `{group_id}`.`Queues` ;"""
#     db.my_cursor.execute(sql_command)
#     sql_command = """DROP TABLE IF EXISTS `{group_id}`.`Students` ;"""
#     db.my_cursor.execute(sql_command)
#     sql_command = """DROP TABLE IF EXISTS `{group_id}`.`Subjects` ;"""
#     db.my_cursor.execute(sql_command)
#     print('All tables are deleted')
#     text = 'All tables are deleted'
#     await message.answer(text)


@dp.message_handler(commands='add_subject')
async def add_subject_start(message: types.Message):
    group_id = str(message.chat.id)
    if not check_database(message):
        await message.answer('üëâ –ë–æ—Ç –¥–ª—è —Ü—ñ—î—ó –≥—Ä—É–ø–∏ —â–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /start')
        return
    subjects = get_subjects(group_id)
    string = ''
    if subjects:
        string += 'üìö –°–ø–∏—Å–æ–∫ –≤–∂–µ —ñ—Å–Ω—É—é—á–∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤:\n'
        for subject, i in zip(subjects, range(len(subjects))):
            string += f'{i + 1}. {subject}\n'
    else:
        string = 'ü´• –°–ø–∏—Å–æ–∫ –≤–∂–µ —ñ—Å–Ω—É—é—á–∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π\n'
    
    teachers = get_teachers(group_id)
    if teachers:
        await Form.subject.set()
        string += '\nüë©‚Äçüè´ –°–ø–∏—Å–æ–∫ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤:\n'
        for teacher, i in zip(teachers, range(len(teachers))):
            string += f'{i + 1}. {teacher}\n'
        string += '\nüìù –ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É –ø—Ä–µ–¥–º–µ—Ç—É, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏, —ñ –Ω–æ–º–µ—Ä –≤–∏–∫–ª–∞–¥–∞—á–∞ –∑—ñ —Å–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª' \
                  '\nüëâ –ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ê–ª–≥–æ—Ä–∏—Ç–º—ñ–∑–∞—Ü—ñ—è 4'
    else:
        string += 'ü´• –°–ø–∏—Å–æ–∫ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π\n–°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤, —â–æ–± –¥–æ–¥–∞–≤–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç–∏!'
        string += '\n\n–î–æ–¥–∞—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á–∞: /add_teacher'

    await message.answer(string)
    return


@dp.message_handler(state=Form.subject)
async def add_subject(message: types.Message, state: FSMContext):
    group_id = str(message.chat.id)
    teachers = get_teachers(group_id)
    subjects = get_subjects(group_id)

    data = message.values['text'].split(' ')
    if message.values['text'][0] == '/':
        if message.values['text'] == '/back' or message.values['text'] == '/back@kpi_q_bot':
            await state.finish()
            await message.answer('üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–æ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')
            return
        else:
            await message.answer('üìã –ü–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –Ω–æ–≤–æ—ó –∫–æ–º–∞–Ω–¥–∏ '
                                 '–∑–∞–≤–µ—Ä—à—ñ—Ç—å —Ä–æ–±–æ—Ç—É –∑—ñ —Å—Ç–∞—Ä–æ—é –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ—é /back'
                                 '\n\n‚¨Ü –ó–∞—Ä–∞–∑ –±–æ—Ç –¥–æ—Å—ñ –æ—á—ñ–∫—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
            return
    if len(data) >= 2:
        try:
            number = int(data[-1])
        except ValueError:
            await state.finish()
            await message.answer(f'1Ô∏è‚É£  –ü—ñ—Å–ª—è –Ω–∞–∑–≤–∏ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –≤–∫–∞–∑–∞–Ω–∏–π –Ω–æ–º–µ—Ä –≤–∏–∫–ª–∞–¥–∞—á–∞ –∑—ñ —Å–ø–∏—Å–∫—É'
                                 f'\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /add_subject')
            return

        if not 0 < number <= len(teachers):
            await state.finish()
            await message.answer(f'‚òπ –í–∏ –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ. –ù–æ–º–µ—Ä –≤–∏–∫–ª–∞–¥–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –∑—ñ —Å–ø–∏—Å–∫—É'
                                 f'\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /add_subject')
            return

        teacher = teachers[number-1]
        teacher_id = get_teacher_id(group_id, teacher)
        separator = ' '
        data.pop()
        title = separator.join(data)

        print(len(title))
        if len(title) > 200:
            await state.finish()
            await message.answer('üôÜ‚Äç‚ôÄ –ó–∞–¥–æ–≤–≥–∞ –Ω–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç—É (–±—ñ–ª—å—à–µ 200 —Å–∏–º–≤–æ–ª—ñ–≤)'
                                 '\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /add_subject')
            return

        subjects_lowercase = []
        for subject in subjects:
            subjects_lowercase.append(subject.lower())
        if title.lower() in subjects_lowercase:
            await state.finish()
            await message.answer('üòâ –¶–µ–π –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ –¥–æ–¥–∞–Ω–∏–π'
                                 '\n\n–î–æ–¥–∞—Ç–∏ —ñ–Ω—à–∏–π –ø—Ä–µ–¥–º–µ—Ç: /add_subject\n–î–æ–¥–∞—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á–∞: /add_teacher')
            return

    else:
        await state.finish()
        await message.answer('üóø –í–∏ –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤. –ù–µ–æ–±—Ö—ñ–¥–Ω–æ 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∏: –Ω–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç—É'
                             '—ñ –Ω–æ–º–µ—Ä –≤–∏–∫–ª–∞–¥–∞—á–∞ –∑—ñ —Å–ø–∏—Å–∫—É'
                             '\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /add_subject')
        return

    new_subject = (title, teacher_id)
    sql = f'INSERT INTO `{group_id}`.subjects (title, id_teacher) VALUES (%s, %s);'
    try:
        db.my_cursor.execute(sql, new_subject)
    except mysql.connector.IntegrityError:
        await state.finish()
        await message.answer('üòâ –¶–µ–π –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ –¥–æ–¥–∞–Ω–∏–π'
                             '\n\n–î–æ–¥–∞—Ç–∏ —ñ–Ω—à–∏–π –ø—Ä–µ–¥–º–µ—Ç: /add_subject\n–î–æ–¥–∞—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á–∞: /add_teacher')
        return
    except mysql.connector.DatabaseError:
        await state.finish()
        await message.answer('üò≥ –í–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ –µ–º–æ–¥–∂–∏ –∞–±–æ —ñ–Ω—à—ñ –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª—ñ —Å–∏–º–≤–æ–ª–∏ —á–∏ –≤–≤–æ–¥–∏—Ç–µ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥—ñ –¥–∞–Ω—ñ'
                             '\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /add_subject')
        return
    else:
        db.mydb.commit()

    sql = f'SELECT name FROM `{group_id}`.teachers WHERE id_teacher = {teacher_id};'
    db.my_cursor.execute(sql)
    teacher_name = db.my_cursor.fetchone()[0]  # –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É —É –≤–∏–ø–∞–¥–∫—É —É—Å–ø—ñ—Ö—É

    if db.my_cursor.rowcount < 1:
        await message.answer('üîß –í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —ñ–∑ –∑–∞–ø–∏—Ç–æ–º –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /add_subject')
    else:
        await message.answer(f'‚úÖ –ü—Ä–µ–¥–º–µ—Ç {title} –≤–∏–∫–ª–∞–¥–∞—á–∞ {teacher_name} –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É')
    await state.finish()
    return       
    

@dp.message_handler(commands='add_teacher')
async def add_teacher_start(message: types.Message):
    group_id = str(message.chat.id)
    if not check_database(message):
        await message.answer('üëâ –ë–æ—Ç –¥–ª—è —Ü—ñ—î—ó –≥—Ä—É–ø–∏ —â–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /start')
        return
    await Form.teacher.set()
    teachers = get_teachers(group_id)
    if teachers:
        string = 'üë©‚Äçüè´ –°–ø–∏—Å–æ–∫ —É–∂–µ –¥–æ–¥–∞–Ω–∏—Ö –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤:\n'
        for subject, i in zip(teachers, range(len(teachers))):
            string += f'{i + 1}. {subject}\n'
    else:
        string = 'ü´• –°–ø–∏—Å–æ–∫ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π. –í–∏ –¥–æ–¥–∞—Å—Ç–µ –ø–µ—Ä—à–æ–≥–æ –≤–∏–∫–ª–∞–¥–∞—á–∞\n'
    string += '\nüìù –í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë –≤–∏–∫–ª–∞–¥–∞—á–∞\n' \
              'üíÅ –ó–∞ –±–∞–∂–∞–Ω–Ω—è–º —Ç–∞–∫–æ–∂ –º–æ–∂–Ω–∞ –≤–ø–∏—Å–∞—Ç–∏ —Ç–µ–ª–µ–≥—Ä–∞–º-—Ç–µ–≥, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —Ç–∞ email, —Ä–æ–∑–¥—ñ–ª–∏–≤—à–∏ –≤—Å–µ –∫–æ–º–∞–º–∏'
    await message.answer(string)


@dp.message_handler(state=Form.teacher)
async def add_teacher(message: types.Message, state: FSMContext):
    group_id = str(message.chat.id)
    teachers = get_teachers(group_id)

    data = message.values['text'].split(', ')
    if message.values['text'][0] == '/':
        if message.values['text'] == '/back' or message.values['text'] == '/back@kpi_q_bot':
            await state.finish()
            await message.answer('üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–æ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')
            return
        else:
            await message.answer('üìã –ü–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –Ω–æ–≤–æ—ó –∫–æ–º–∞–Ω–¥–∏ '
                                 '–∑–∞–≤–µ—Ä—à—ñ—Ç—å —Ä–æ–±–æ—Ç—É –∑—ñ —Å—Ç–∞—Ä–æ—é –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ—é /back'
                                 '\n\n‚¨Ü –ó–∞—Ä–∞–∑ –±–æ—Ç –¥–æ—Å—ñ –æ—á—ñ–∫—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
            return

    if len(data) not in range(1, 5):
        await state.finish()
        await message.answer('üóø –í–∏ –≤–≤–µ–ª–∏ –∑–∞–±–∞–≥–∞—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ (–±—ñ–ª—å—à –Ω—ñ–∂ 4)\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /add_teacher')
        return

    name = data[0]
    if len(name) > 200:
        await state.finish()
        await message.answer('üôÜ‚Äç‚ôÄ –ó–∞–¥–æ–≤–≥–µ —ñ–º\' –≤–∏–∫–ª–∞–¥–∞—á–∞ (–±—ñ–ª—å—à–µ 200 —Å–∏–º–≤–æ–ª—ñ–≤)'
                             '\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /add_teacher')
        return

    teachers_lowercase = []
    for teacher in teachers:
        teachers_lowercase.append(teacher.lower())
    if name.lower() in teachers_lowercase:
        await state.finish()
        await message.answer('üòâ –¶–µ–π –≤–∏–∫–ª–∞–¥–∞—á —É–∂–µ –¥–æ–¥–∞–Ω–∏–π'
                             '\n\n–î–æ–¥–∞—Ç–∏ —ñ–Ω—à–æ–≥–æ –≤–∏–∫–ª–∞–¥–∞—á–∞: /add_teacher\n–î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç: /add_subject')
        return
    allowed_name_symbols = ('-', '.', "'", "`")
    if not all(x.isalpha() or x.isspace() or x in allowed_name_symbols for x in name):
        await state.finish()
        await message.answer('üî§ –Ü–º\'—è –≤–∏–∫–ª–∞–¥–∞—á–∞ –ø–æ–≤–∏–Ω–Ω–µ —Å–∫–ª–∞–¥–∞—Ç–∏—Å—è –ª–∏—à–µ –∑ –ª—ñ—Ç–µ—Ä —Ç–∞ —Å–∏–º–≤–æ–ª—ñ–≤, '
                             '—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è –≤ —ñ–º–µ–Ω–∞—Ö\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /add_teacher')
        return
    if len(data) == 1:
        new_teacher = (name,)
        sql = f'INSERT INTO `{group_id}`.teachers (name) VALUES (%s);'
    else:
        username_telegram = data[1]
        username_telegram = username_telegram if username_telegram[0] == '@' else '@' + username_telegram
        if len(data) == 2:
            new_teacher = (name, username_telegram)
            sql = f'INSERT INTO `{group_id}`.teachers (name, username_telegram) VALUES (%s, %s);'
        elif len(data) == 3:
            phone_number = data[2]
            new_teacher = (name, username_telegram, phone_number)
            sql = f'INSERT INTO `{group_id}`.teachers (name, username_telegram, phone_number) VALUES (%s, %s, %s);'
        elif len(data) == 4:
            phone_number = data[2]
            email = data[3]
            new_teacher = (name, username_telegram, phone_number, email)
            sql = f'INSERT INTO `{group_id}`.teachers (name, username_telegram, phone_number, email)' \
                  f'VALUES (%s, %s, %s, %s);'
    try:
        db.my_cursor.execute(sql, new_teacher)
    except mysql.connector.IntegrityError:
        await state.finish()
        await message.answer('üòâ –¶–µ–π –≤–∏–∫–ª–∞–¥–∞—á —É–∂–µ –¥–æ–¥–∞–Ω–∏–π'
                             '\n\n–î–æ–¥–∞—Ç–∏ —ñ–Ω—à–æ–≥–æ –≤–∏–∫–ª–∞–¥–∞—á–∞: /add_teacher\n–î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç: /add_subject')
        return
    except mysql.connector.DatabaseError:
        await state.finish()
        await message.answer('üò≥ –í–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ –µ–º–æ–¥–∂–∏ –∞–±–æ —ñ–Ω—à—ñ –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª—ñ —Å–∏–º–≤–æ–ª–∏ —á–∏ –≤–≤–æ–¥–∏—Ç–µ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥—ñ –¥–∞–Ω—ñ'
                             '\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /add_teacher')
        return
    else:
        db.mydb.commit()

    if db.my_cursor.rowcount < 1:
        await message.answer('üîß –í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —ñ–∑ –∑–∞–ø–∏—Ç–æ–º –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /add_subject')
    else:
        await message.answer(f'‚úÖ –í–∏–∫–ª–∞–¥–∞—á–∞ {name} –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É')
    await state.finish()


@dp.message_handler(commands='add_teacher_info')
async def add_teacher_info_start(message: types.Message):
    group_id = str(message.chat.id)
    if not check_database(message):
        await message.answer('üëâ –ë–æ—Ç –¥–ª—è —Ü—ñ—î—ó –≥—Ä—É–ø–∏ —â–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /start')
        return
    await Form.info.set()
    teachers = get_teachers(group_id)
    if teachers:
        string = 'üë©‚Äçüè´ –°–ø–∏—Å–æ–∫ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤:\n'
        for teacher, i in zip(teachers, range(len(teachers))):
            string += f'{i + 1}. {teacher}\n'
        string += '\nüìù –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤–∏–∫–ª–∞–¥–∞—á–∞ –∑—ñ —Å–ø–∏—Å–∫—É, –ø—ñ—Å–ª—è —á–æ–≥–æ —á–µ—Ä–µ–∑ –∫–æ–º—É –¥–æ–¥–∞–π—Ç–µ –≤—Å—é –Ω–µ–æ–±—Ö—ñ–¥–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é'
    else:
        string = 'ü´• –°–ø–∏—Å–æ–∫ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π. –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ –≤–∏–∫–ª–∞–¥–∞—á–∞'
        string += '\n\n–î–æ–¥–∞—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á–∞: /add_teacher'
    await message.answer(string)


@dp.message_handler(state=Form.info)
async def add_teacher_info(message: types.Message, state: FSMContext):
    group_id = str(message.chat.id)
    data = message.values['text'].split(', ')
    if message.values['text'][0] == '/':
        if message.values['text'] == '/back' or message.values['text'] == '/back@kpi_q_bot':
            await state.finish()
            await message.answer('üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–æ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')
            return
        else:
            await message.answer('üìã –ü–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –Ω–æ–≤–æ—ó –∫–æ–º–∞–Ω–¥–∏ '
                                 '–∑–∞–≤–µ—Ä—à—ñ—Ç—å —Ä–æ–±–æ—Ç—É –∑—ñ —Å—Ç–∞—Ä–æ—é –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ—é /back'
                                 '\n\n‚¨Ü –ó–∞—Ä–∞–∑ –±–æ—Ç –¥–æ—Å—ñ –æ—á—ñ–∫—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
            return

    if len(data) >= 2:
        try:
            number = int(data[0])
        except ValueError:
            await state.finish()
            await message.answer('1Ô∏è‚É£  –ü–µ—Ä—à–∏–º –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –Ω–æ–º–µ—Ä\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /add_teacher_info')
            return
        separator = ' '
        del data[0]

        info = separator.join(data)
        max_info_size = 1000
        if len(info) > max_info_size:
            await state.finish()
            await message.answer(f'üôÜ‚Äç‚ôÄ –ó–∞–≤–µ–ª–∏–∫–∏–π –æ–±\'—î–º —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó! –í–≤–µ–¥—ñ—Ç—å –Ω–µ –±—ñ–ª—å—à–µ {max_info_size} —Å–∏–º–≤–æ–ª—ñ–≤ '
                                 '–≤–∫–ª—é—á–Ω–æ –∑ –ø—Ä–æ–±—ñ–ª–∞–º–∏\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /add_teacher_info')
            return

        name = get_teachers(group_id)[number - 1]
        id = get_teacher_id(group_id, name)

        db.my_cursor.execute(f"SELECT info FROM `{group_id}`.teachers WHERE id_teacher = %s", (id,))
        info_exists = bool(db.my_cursor.fetchone()[0])

        new_info = (info, id)
        sql = f'UPDATE `{group_id}`.teachers SET info = %s WHERE id_teacher = %s;'
        try:
            db.my_cursor.execute(sql, new_info)
        except mysql.connector.DatabaseError:
            await state.finish()
            await message.answer('üîß –í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —ñ–∑ –∑–∞–ø–∏—Ç–æ–º –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /add_teacher_info')
            return
        else:
            db.mydb.commit()
    else:
        await state.finish()
        await message.answer('üóø –í–∏ –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤. –ù–µ–æ–±—Ö—ñ–¥–Ω–æ 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —á–µ—Ä–µ–∑ –∫–æ–º—É: '
                             '–Ω–æ–º–µ—Ä –≤–∏–∫–ª–∞–¥–∞—á–∞ –∑—ñ —Å–ø–∏—Å–∫—É —ñ –¥–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –Ω—å–æ–≥–æ \n\n'
                             '–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /add_teacher_info')
        return

    if db.my_cursor.rowcount < 1:
        await message.answer('ü§î –ó–¥–∞—î—Ç—å—Å—è, –í–∏ –≤–≤–µ–ª–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é, —è–∫–∞ —î —ñ–¥–µ–Ω—Ç–∏—á–Ω–æ—é –¥–æ –≤–∂–µ —ñ—Å–Ω—É—é—á–æ—ó'
                             '\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /add_teacher_info')
    else:
        if info_exists:
            await message.answer(f'üîÑ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–æ')
        else:
            await message.answer(f'‚úÖ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–æ–¥–∞–Ω–æ')
    await state.finish()
    return


@dp.message_handler(commands='update_subject')
async def update_subject_start(message: types.Message):
    group_id = str(message.chat.id)
    if not check_database(message):
        await message.answer('üëâ –ë–æ—Ç –¥–ª—è —Ü—ñ—î—ó –≥—Ä—É–ø–∏ —â–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /start')
        return
    subjects = get_subjects_with_teachers(group_id)
    if subjects:
        await Form.update_subject.set()
        string = 'üìö –°–ø–∏—Å–æ–∫ —ñ—Å–Ω—É—é—á–∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤:\n\n'
        for subject, i in zip(subjects, range(len(subjects))):
            string += f'{subject[0]}. {subject[1]} ‚Äî {subject[2]}\n'
        
        teachers = get_teachers(group_id)
        string += '\nüë©‚Äçüè´ –°–ø–∏—Å–æ–∫ –¥–æ–¥–∞–Ω–∏—Ö –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤:\n'
        for teacher, i in zip(teachers, range(len(teachers))):
            string += f'{i + 1}. {teacher}\n'
        string += '\nüìù –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç—É –∑—ñ —Å–ø–∏—Å–∫—É, –Ω–æ–≤—É –Ω–∞–∑–≤—É –ø—Ä–µ–¥–º–µ—Ç—É —Ç–∞' \
                  '–Ω–æ–º–µ—Ä –≤–∏–∫–ª–∞–¥–∞—á–∞ –∑—ñ —Å–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª' \
                  '\nüëâ –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 3 –ê–ª–≥–æ—Ä–∏—Ç–º–∏ —ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö 5'
    else:
        string = 'ü´• –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π. –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ –ø—Ä–µ–¥–º–µ—Ç'
        string += '\n\n–î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç: /add_subject'
    await message.answer(string)
    return 


@dp.message_handler(state=Form.update_subject)
async def update_subject(message: types.Message, state: FSMContext):
    group_id = str(message.chat.id)
    subjects = get_subjects(group_id)
    teachers = get_teachers(group_id)
    data = message.values['text'].split(' ')
    if message.values['text'][0] == '/':
        if message.values['text'] == '/back' or message.values['text'] == '/back@kpi_q_bot':
            await state.finish()
            await message.answer('üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–æ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')
            return
        else:
            await message.answer('üìã –ü–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –Ω–æ–≤–æ—ó –∫–æ–º–∞–Ω–¥–∏ '
                                 '–∑–∞–≤–µ—Ä—à—ñ—Ç—å —Ä–æ–±–æ—Ç—É –∑—ñ —Å—Ç–∞—Ä–æ—é –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ—é /back'
                                 '\n\n‚¨Ü –ó–∞—Ä–∞–∑ –±–æ—Ç –¥–æ—Å—ñ –æ—á—ñ–∫—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
            return
    if len(data) > 2:
        try:
            subject_number = int(data[0])
            teacher_number = int(data[-1])
        except ValueError:
            await state.finish()
            await message.answer('1Ô∏è‚É£ –ù–æ–º–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç—É —ñ –≤–∏–∫–ª–∞–¥–∞—á–∞ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ —á–∏—Å–ª–∞–º–∏'
                                 '\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /update_subject')
            return
    else:
        await state.finish()
        await message.answer('üóø –í–∏ –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤. –ù–µ–æ–±—Ö—ñ–¥–Ω–æ 3 –ø–∞—Ä–∞–º–µ—Ç—Ä–∏: –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç—É'
                             '–∑—ñ —Å–ø–∏—Å–∫—É, –Ω–æ–≤–∞ –Ω–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç—É —ñ –Ω–æ–º–µ—Ä –≤–∏–∫–ª–∞–¥–∞—á–∞ –∑—ñ —Å–ø–∏—Å–∫—É'
                             '\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /update_subject')
        return

    if not 0 < subject_number <= len(subjects) or not 0 < teacher_number <= len(teachers):
        await state.finish()
        await message.answer('‚òπ –í–∏ –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ!\n\n–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç—É –∑—ñ —Å–ø–∏—Å–∫—É, '
                             '–Ω–æ–≤—É –Ω–∞–∑–≤—É –ø—Ä–µ–¥–º–µ—Ç—É —Ç–∞ –Ω–æ–º–µ—Ä –≤–∏–∫–ª–∞–¥–∞—á–∞ –∑—ñ —Å–ø–∏—Å–∫—É'
                             '\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /update_subject')
        return

    separator = ' '
    del data[0]
    del data[-1]
    title = separator.join(data)

    if len(title) > 200:
        await state.finish()
        await message.answer('üôÜ‚Äç‚ôÄ –ó–∞–¥–æ–≤–≥–∞ –Ω–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç—É (–±—ñ–ª—å—à–µ 200 —Å–∏–º–≤–æ–ª—ñ–≤)'
                             '\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /update_subject')
        return

    previous_title = subjects[subject_number - 1]
    subject_id = get_subject_id(group_id, previous_title)

    subjects_without_current = list(subjects)
    subjects_without_current_lowercase = []
    for subject in subjects:
        if subject == previous_title:
            subjects_without_current.remove(previous_title)
    for subject in subjects_without_current:
        subjects_without_current_lowercase.append(subject.lower())
    if title.lower() in subjects_without_current_lowercase:
        await state.finish()
        await message.answer(f'üôÑ –ü—Ä–µ–¥–º–µ—Ç –∑ –Ω–∞–∑–≤–æ—é {title} –≤–∂–µ —î'
                             f'\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /update_subject')
        return

    name = teachers[teacher_number - 1]
    teacher_id = get_teacher_id(group_id, name)

    new_subject = (title, teacher_id, subject_id)

    sql = f'UPDATE `{group_id}`.subjects SET title = %s, id_teacher = %s WHERE subject_id = %s;'
    try:
        db.my_cursor.execute(sql, new_subject)
    except mysql.connector.IntegrityError:
        await state.finish()
        await message.answer('üòâ –¶–µ–π –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ –¥–æ–¥–∞–Ω–∏–π'
                             '\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /update_subject\n–î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç: /add_subject')
        return
    except mysql.connector.DatabaseError:
        await state.finish()
        await message.answer('üîß –í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —ñ–∑ –∑–∞–ø–∏—Ç–æ–º –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö'
                             '\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /update_subject')
        return
    else:
        db.mydb.commit()

    if db.my_cursor.rowcount < 1:
        await message.answer('ü§î –ó–¥–∞—î—Ç—å—Å—è, –í–∏ –≤–≤–µ–ª–∏ –¥–∞–Ω—ñ, —è–∫—ñ —î —ñ–¥–µ–Ω—Ç–∏—á–Ω–∏–º–∏ –¥–æ –≤–∂–µ —ñ—Å–Ω—É—é—á–∏—Ö'
                             '\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /update_subject')
    else:
        await message.answer(f'üîÑ –ü—Ä–µ–¥–º–µ—Ç {title} —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π')
    await state.finish()
    return


@dp.message_handler(commands='update_teacher')
async def update_teacher_start(message: types.Message):
    group_id = str(message.chat.id)
    if not check_database(message):
        await message.answer('üëâ –ë–æ—Ç –¥–ª—è —Ü—ñ—î—ó –≥—Ä—É–ø–∏ —â–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /start')
        return
    teachers = get_teachers_with_all_info(group_id)
    if teachers:
        await Form.update_teacher.set()
        string = 'üë©‚Äçüè´ –°–ø–∏—Å–æ–∫ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤:\n'
        for i, name, username_telegram, phone_number, email, info in teachers:
            username_telegram = username_telegram if username_telegram else '(–Ω–µ–º–∞—î)'
            phone_number = phone_number if phone_number else '(–Ω–µ–º–∞—î)'
            email = email if email else '(–Ω–µ–º–∞—î)'
            string += f'\n{i}. {name}\n' \
                      f'  üí¨  –¢–µ–ª–µ–≥—Ä–∞–º: {username_telegram}\n' \
                      f'  üì±  –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone_number}\n' \
                      f'  ‚úâ  –ï–ª. –ø–æ—à—Ç–∞: {email}\n'
        string += '\nüìù –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤–∏–∫–ª–∞–¥–∞—á–∞ –∑—ñ —Å–ø–∏—Å–∫—É, ' \
                  '–ø—ñ—Å–ª—è —Ü—å–æ–≥–æ —ñ–º\'—è, –Ω—ñ–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º—ñ, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —Ç–∞ email. –í—Å–µ —á–µ—Ä–µ–∑ –∫–æ–º—É. ' \
                  '–Ø–∫—â–æ —è–∫–æ—ó—Å—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –Ω–µ–º–∞—î, –ø–æ—Å—Ç–∞–≤—Ç–µ "-"' \
                  '\nüëâ –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 2, –ö–æ–≤–∞–ª–µ–Ω–∫–æ –Ü–≤–∞–Ω –ê–Ω–¥—Ä—ñ–π–æ–≤–∏—á, -, +380000000000, -' \
                  '\n\n‚òù –Ø–∫—â–æ –≤–∏ –±–∞–∂–∞—î—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∏–∫–ª–∞–¥–∞—á–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –¥–ª—è —Ü—å–æ–≥–æ –æ–∫—Ä–µ–º–æ—é –∫–æ–º–∞–Ω–¥–æ—é. ' \
                  '–©–æ–± –¥–æ–¥–∞—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á–∞ –¥–æ –ø—Ä–µ–¥–º–µ—Ç—É, –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –π–æ–≥–æ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∞–±–æ –∂ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø—Ä–µ–¥–º–µ—Ç—É' \
                  '\n\n–î–æ–¥–∞—Ç–∏ –∞–±–æ –æ–Ω–æ–≤–∏—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∏–∫–ª–∞–¥–∞—á–∞: /add_teacher_info' \
                  '\n–î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç: /add_subject\n–û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç: /update_subject'
    else:
        string = 'ü´• –°–ø–∏—Å–æ–∫ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π. –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ –¥–æ —Å–ø–∏—Å–∫—É'
        string += '\n\n–î–æ–¥–∞—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á–∞: /add_teacher'
    await message.answer(string)


@dp.message_handler(state=Form.update_teacher)
async def update_teacher(message: types.Message, state: FSMContext):
    group_id = str(message.chat.id)
    teachers = get_teachers(group_id)
    data = message.values['text'].split(', ')
    if message.values['text'][0] == '/':
        if message.values['text'] == '/back' or message.values['text'] == '/back@kpi_q_bot':
            await state.finish()
            await message.answer('üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–æ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')
            return
        else:
            await message.answer('üìã –ü–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –Ω–æ–≤–æ—ó –∫–æ–º–∞–Ω–¥–∏ '
                                 '–∑–∞–≤–µ—Ä—à—ñ—Ç—å —Ä–æ–±–æ—Ç—É –∑—ñ —Å—Ç–∞—Ä–æ—é –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ—é /back'
                                 '\n\n‚¨Ü –ó–∞—Ä–∞–∑ –±–æ—Ç –¥–æ—Å—ñ –æ—á—ñ–∫—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
            return
    if len(data) == 5:
        number = data[0]

        if len(data[1]) > 200:
            await state.finish()
            await message.answer('üôÜ‚Äç‚ôÄ –ó–∞–¥–æ–≤–≥–µ —ñ–º\'—è –≤–∏–∫–ª–∞–¥–∞—á–∞ (–±—ñ–ª—å—à–µ 200 —Å–∏–º–≤–æ–ª—ñ–≤)'
                                 '\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /update_teacher')
            return
        name = data[1]

        if len(data[2]) > 60:
            await state.finish()
            await message.answer('üòî –ù–∞ –∂–∞–ª—å, –∑–∞–¥–æ–≤–≥–∏–π –Ω—ñ–∫–Ω–µ–π–º Telegram. –°–∫–æ–Ω—Ç–∞–∫—Ç—É–π—Ç–µ –∑ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞–º–∏ –±–æ—Ç–∞'
                                 '\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /update_teacher')
            return
        username_telegram = data[2] if data[2] != '-' else None

        if len(data[3]) > 20:
            await state.finish()
            await message.answer('üôÜ‚Äç‚ôÄ –ó–∞–¥–æ–≤–≥–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–º—ñ—Å—Ç—ñ—Ç—å –π–æ–≥–æ —É 20 —Å–∏–º–≤–æ–ª—ñ–≤'
                                 '\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /update_teacher')
            return
        phone_number = data[3] if data[3] != '-' else None

        if len(data[4]) > 70:
            await state.finish()
            await message.answer('üòî –ù–∞ –∂–∞–ª—å, –∑–∞–¥–æ–≤–≥–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞. –°–∫–æ–Ω—Ç–∞–∫—Ç—É–π—Ç–µ –∑ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞–º–∏ –±–æ—Ç–∞'
                                 '\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /update_teacher')
            return
        email = data[4] if data[4] != '-' else None
    else:
        await state.finish()
        await message.answer('üóø –í–∏ –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤. –ù–µ–æ–±—Ö—ñ–¥–Ω–æ 5 –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —á–µ—Ä–µ–∑ –∫–æ–º—É:'
                             '–Ω–æ–º–µ—Ä –≤–∏–∫–ª–∞–¥–∞—á–∞ –∑—ñ —Å–ø–∏—Å–∫—É, —ñ–º\'—è –≤–∏–∫–ª–∞–¥–∞—á–∞, –Ω—ñ–∫ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º—ñ, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —Ç–∞ email. '
                             '–Ø–∫—â–æ —è–∫–æ—ó—Å—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –Ω–µ–º–∞—î, –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ "-".'
                             '\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /update_teacher')
        return

    try:
        number = int(number)
    except ValueError:
        await state.finish()
        await message.answer('1Ô∏è‚É£ –ü–µ—Ä—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤–∏–∫–ª–∞–¥–∞—á–∞ –∑—ñ —Å–ø–∏—Å–∫—É'
                             '\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /update_teacher')
        return

    if not 0 < number <= len(teachers):
        await state.finish()
        await message.answer(f'‚òπ –í–∏ –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ. –ù–æ–º–µ—Ä –≤–∏–∫–ª–∞–¥–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –∑—ñ —Å–ø–∏—Å–∫—É'
                             '\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /update_teacher')
        return

    previous_name = teachers[number - 1]
    teacher_id = get_teacher_id(group_id, previous_name)

    teachers_without_current = list(teachers)
    teachers_without_current_lowercase = []
    for teacher in teachers:
        if teacher == previous_name:
            teachers_without_current.remove(previous_name)
    for teacher in teachers_without_current:
        teachers_without_current_lowercase.append(teacher.lower())
    if name.lower() in teachers_without_current_lowercase:
        await state.finish()
        await message.answer(f'üôÑ –í–∏–∫–ª–∞–¥–∞—á –∑ —ñ–º–µ–Ω–µ–º {name} –≤–∂–µ —î'
                             f'\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /update_teacher')
        return

    if username_telegram and username_telegram[0] != '@':
        username_telegram = '@' + username_telegram

    new_teacher_data = (name, username_telegram, phone_number, email, teacher_id)
    sql = f"""UPDATE `{group_id}`.teachers
             SET name = %s, username_telegram = %s, phone_number = %s, email = %s
             WHERE id_teacher = %s"""
    try:
        db.my_cursor.execute(sql, new_teacher_data)
    except mysql.connector.IntegrityError:
        await state.finish()
        await message.answer('üòâ –¶–µ–π –≤–∏–∫–ª–∞–¥–∞—á —É–∂–µ –¥–æ–¥–∞–Ω–∏–π'
                             '\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /update_teacher\n–î–æ–¥–∞—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á–∞: /add_teacher')
        return
    except mysql.connector.DatabaseError:
        await state.finish()
        await message.answer('üò≥ –í–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ –µ–º–æ–¥–∂–∏ –∞–±–æ —ñ–Ω—à—ñ –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª—ñ —Å–∏–º–≤–æ–ª–∏ —á–∏ –≤–≤–æ–¥–∏—Ç–µ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥—ñ –¥–∞–Ω—ñ'
                             '\n\nüîß –Ø–∫—â–æ –Ω—ñ, —Ç–æ –≤–∏–Ω–∏–∫–ª–∞ —è–∫–∞—Å—å —ñ–Ω—à–∞ –ø—Ä–æ–±–ª–µ–º–∞ —ñ–∑ –∑–∞–ø–∏—Ç–æ–º –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö'
                             '\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /update_teacher')
        return
    else:
        db.mydb.commit()

    if db.my_cursor.rowcount < 1:
        await message.answer('ü§î –ó–¥–∞—î—Ç—å—Å—è, –í–∏ –≤–≤–µ–ª–∏ –¥–∞–Ω—ñ, —è–∫—ñ —î —ñ–¥–µ–Ω—Ç–∏—á–Ω–∏–º–∏ –¥–æ –≤–∂–µ —ñ—Å–Ω—É—é—á–∏—Ö'
                             '\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /update_teacher')
    else:
        await message.answer(f'üîÑ –í–∏–∫–ª–∞–¥–∞—á {name} —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π')
    await state.finish()
    return


@dp.message_handler(commands='delete_subject')
async def delete_subject_start(message: types.Message):
    group_id = str(message.chat.id)
    if not check_database(message):
        await message.answer('üëâ –ë–æ—Ç –¥–ª—è —Ü—ñ—î—ó –≥—Ä—É–ø–∏ —â–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /start')
        return
    await Form.delete_subject.set()
    subjects = get_subjects_with_id(group_id)
    string = 'üìö –°–ø–∏—Å–æ–∫ —ñ—Å–Ω—É—é—á–∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤:\n'
    for subject, i in zip(subjects, range(len(subjects))):
        string += f'{i + 1}. {subject[1]}\n'
    string += '\nüìù –ù–∞–ø–∏—à—ñ—Ç—å –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç—É, —è–∫–∏–π –ø–æ—Å—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏, –∑—ñ —Å–ø–∏—Å–∫—É'
    await message.answer(string)
    return 


@dp.message_handler(state=Form.delete_subject)
async def delete_subject(message: types.Message, state: FSMContext):
    group_id = str(message.chat.id)
    subjects = get_subjects(group_id)
    data = message.values['text'].split(' ')
    if message.values['text'][0] == '/':
        if message.values['text'] == '/back' or message.values['text'] == '/back@kpi_q_bot':
            await state.finish()
            await message.answer('üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–æ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')
            return
        else:
            await message.answer('üìã –ü–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –Ω–æ–≤–æ—ó –∫–æ–º–∞–Ω–¥–∏ '
                                 '–∑–∞–≤–µ—Ä—à—ñ—Ç—å —Ä–æ–±–æ—Ç—É –∑—ñ —Å—Ç–∞—Ä–æ—é –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ—é /back'
                                 '\n\n‚¨Ü –ó–∞—Ä–∞–∑ –±–æ—Ç –¥–æ—Å—ñ –æ—á—ñ–∫—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
            return
    if len(data) == 1:
        try:
            number = int(data[0])
        except ValueError:
            await state.finish()
            await message.answer('1Ô∏è‚É£ –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç—É –∑—ñ —Å–ø–∏—Å–∫—É\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /delete_subject')
            return

        if not 0 < number <= len(subjects):
            await state.finish()
            await message.answer(f'‚òπ –í–∏ –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ. –ù–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç—É –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –∑—ñ —Å–ø–∏—Å–∫—É'
                                 f'\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /delete_subject')
            return

    else:
        await state.finish()
        await message.answer('üóø –í–∏ –≤–≤–µ–ª–∏ –±—ñ–ª—å—à –Ω—ñ–∂ –æ–¥–Ω–µ —á–∏—Å–ª–æ\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /delete_subject')
        return

    title = subjects[number - 1]
    id = get_subject_id(group_id, title)

    sql = f'DELETE FROM `{group_id}`.subjects WHERE subject_id = %s;'

    try:
        db.my_cursor.execute(sql, (id,))
    except mysql.connector.IntegrityError:
        await state.finish()
        await message.answer('üóí –ù–∞ —Ü–µ–π –ø—Ä–µ–¥–º–µ—Ç —ñ—Å–Ω—É—î —á–µ—Ä–≥–∞. –°–ø–æ—á–∞—Ç–∫—É –≤–∏–¥–∞–ª—ñ—Ç—å —ó—ó\n\n'
                             '–í–∏–¥–∞–ª–∏—Ç–∏ —á–µ—Ä–≥—É: /delete_queue\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /delete_subject')
        return
    db.mydb.commit()

    if db.my_cursor.rowcount < 1:
        await message.answer('üîß –í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —ñ–∑ –∑–∞–ø–∏—Ç–æ–º –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /delete_subject')
    else:
        await message.answer(f'üóë –ü—Ä–µ–¥–º–µ—Ç –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ')
    await state.finish()
    return


@dp.message_handler(commands='delete_teacher')
async def delete_teacher_start(message: types.Message):
    group_id = str(message.chat.id)
    if not check_database(message):
        await message.answer('üëâ –ë–æ—Ç –¥–ª—è —Ü—ñ—î—ó –≥—Ä—É–ø–∏ —â–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /start')
        return
    await Form.delete_teacher.set()
    teachers = get_teachers_with_id(group_id)
    string = 'üë©‚Äçüè´ –°–ø–∏—Å–æ–∫ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤:\n'
    for teacher, i in zip(teachers, range(len(teachers))):
        string += f'{i + 1}. {teacher[1]}\n'
    string += '\nüìù –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤–∏–∫–ª–∞–¥–∞—á–∞, —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏, –∑—ñ —Å–ø–∏—Å–∫—É\n\n' \
              '‚òù –Ø–∫—â–æ –≤–∏–∫–ª–∞–¥–∞—á —á–∏—Ç–∞—î —è–∫–∏–π—Å—å –ø—Ä–µ–¥–º–µ—Ç, —Ç–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –π–æ–≥–æ –Ω–µ–º–æ–∂–ª–∏–≤–æ. ' \
              '–í —Ç–∞–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É –∞–±–æ –≤–∏–¥–∞–ª—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç, —è–∫–∏–π –≤–∏–∫–ª–∞–¥–∞—î —Ü–µ–π –≤–∏–∫–ª–∞–¥–∞—á, –∞–±–æ –∑–º—ñ–Ω—ñ—Ç—å –≤–∏–∫–ª–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç—É'
    string += '\n\n–í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç: /delete_subject\n–ó–º—ñ–Ω–∏—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç—É: /update_subject'
    await message.answer(string)
    return


@dp.message_handler(state=Form.delete_teacher)
async def delete_teacher(message: types.Message, state: FSMContext):
    group_id = str(message.chat.id)
    teachers = get_teachers(group_id)
    data = message.values['text'].split(' ')
    if message.values['text'][0] == '/':
        if message.values['text'] == '/back' or message.values['text'] == '/back@kpi_q_bot':
            await state.finish()
            await message.answer('üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–æ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')
            return
        else:
            await message.answer('üìã –ü–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –Ω–æ–≤–æ—ó –∫–æ–º–∞–Ω–¥–∏ '
                                 '–∑–∞–≤–µ—Ä—à—ñ—Ç—å —Ä–æ–±–æ—Ç—É –∑—ñ —Å—Ç–∞—Ä–æ—é –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ—é /back'
                                 '\n\n‚¨Ü –ó–∞—Ä–∞–∑ –±–æ—Ç –¥–æ—Å—ñ –æ—á—ñ–∫—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
            return
    if len(data) == 1:
        try:
            number = int(data[0])
        except ValueError:
            await state.finish()
            await message.answer('1Ô∏è‚É£ –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤–∏–∫–ª–∞–¥–∞—á–∞ –∑—ñ —Å–ø–∏—Å–∫—É\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /delete_teacher')
            return
    else:
        await state.finish()
        await message.answer('üóø –í–∏ –≤–≤–µ–ª–∏ –±—ñ–ª—å—à –Ω—ñ–∂ –æ–¥–Ω–µ —á–∏—Å–ª–æ\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /delete_teacher')
        return
    if not 0 < number <= len(teachers):
        await state.finish()
        await message.answer(f'‚òπ –í–∏ –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –¥–∞–Ω—ñ. –ù–æ–º–µ—Ä –≤–∏–∫–ª–∞–¥–∞—á–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –∑—ñ —Å–ø–∏—Å–∫—É'
                             f'\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /delete_teacher')
        return

    name = teachers[number - 1]
    id = get_teacher_id(group_id, name)
    sql = f'DELETE FROM `{group_id}`.teachers WHERE id_teacher = %s;'
    try:
        db.my_cursor.execute(sql, (id,))
    except mysql.connector.IntegrityError:
        await state.finish()
        await message.answer('üìô –¶–µ–π –≤–∏–∫–ª–∞–¥–∞—á —á–∏—Ç–∞—î —è–∫–∏–π—Å—å –ø—Ä–µ–¥–º–µ—Ç. –°–ø–µ—Ä—à—É –≤–∏–¥–∞–ª—ñ—Ç—å —Ü–µ–π –ø—Ä–µ–¥–º–µ—Ç '
                             '–∞–±–æ –ø—Ä–∏–∑–Ω–∞—á—Ç–µ –¥–ª—è –Ω—å–æ–≥–æ —ñ–Ω—à–æ–≥–æ –≤–∏–∫–ª–∞–¥–∞—á–∞\n\n–í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç: /delete_subject'
                             '\n–ó–º—ñ–Ω–∏—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç—É: /update_subject\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /delete_teacher')
        return
    else:
        db.mydb.commit()

    if db.my_cursor.rowcount < 1:
        await message.answer('üîß –í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —ñ–∑ –∑–∞–ø–∏—Ç–æ–º –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /delete_teacher')
    else:
        await message.answer(f'üóë {name} –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ')
    await state.finish()
    return


def get_teachers(group_id):
    db.my_cursor.execute(f"""SELECT name FROM `{group_id}`.teachers
                            ORDER BY id_teacher;""")
    result = db.my_cursor.fetchall()

    teachers = []
    for teacher in result:
        teachers.append(teacher[0])

    return tuple(teachers)


def get_teacher_id(group_id, teacher_name):
    query = f"""SELECT id_teacher
                FROM `{group_id}`.teachers
                WHERE name = %s"""
    db.my_cursor.execute(query, (teacher_name,))
    teacher_id = int(db.my_cursor.fetchone()[0])

    return teacher_id


def get_teachers_with_id(group_id):
    db.my_cursor.execute(f"""SELECT id_teacher, name FROM `{group_id}`.teachers
                            ORDER BY id_teacher;""")
    result = db.my_cursor.fetchall()

    teachers = []
    for i, teacher in enumerate(result):
        teachers.append((i+1, teacher[1]))

    return tuple(teachers)


def get_teachers_with_all_info(group_id):
    db.my_cursor.execute(f"""SELECT `name`, `username_telegram`, `phone_number`, `email`, `info`
                            FROM `{group_id}`.teachers
                            ORDER BY id_teacher;""")
    result = db.my_cursor.fetchall()

    teachers = []
    for i, teacher in enumerate(result):
        teachers.append((i+1, teacher[0], teacher[1], teacher[2], teacher[3], teacher[4]))

    return tuple(teachers)


def get_subjects(group_id):
    db.my_cursor.execute(f"""SELECT title FROM `{group_id}`.subjects
                            ORDER BY subject_id""")
    result = db.my_cursor.fetchall()

    subjects = []
    for subject in result:
        subjects.append(subject[0])

    return tuple(subjects)


def get_subjects_with_id(group_id):
    db.my_cursor.execute(f"""SELECT subject_id, title FROM `{group_id}`.subjects
                            ORDER BY subject_id;""")
    result = db.my_cursor.fetchall()

    subjects = []
    for i, subject in enumerate(result):
        subjects.append((i+1, subject[1]))

    return tuple(subjects)


def get_subjects_with_teachers(group_id):
    db.my_cursor.execute(f"""SELECT subject_id, title, name
                         FROM `{group_id}`.`Subjects`
                         INNER JOIN `{group_id}`.teachers ON subjects.id_teacher = teachers.id_teacher
                         ORDER BY subject_id;""")
    result = db.my_cursor.fetchall()

    subjects = []
    for i, subject in enumerate(result):
        subjects.append((i+1, subject[1], subject[2]))

    return tuple(subjects)


def get_subjects_with_queues(group_id):
    db.my_cursor.execute(f"""SELECT DISTINCT title FROM `{group_id}`.subjects
                      WHERE subject_id IN
                      (SELECT subject_id FROM `{group_id}`.queues)
                      ORDER BY subject_id;""")
    result = db.my_cursor.fetchall()

    subjects_with_queues = []

    for subject in result:
        subjects_with_queues.append(subject[0])

    return tuple(subjects_with_queues)


def get_subject_id(group_id, subject=None):
    db.my_cursor.execute(f'SELECT `active_subject` FROM `{group_id}`.system_settings;')
    active_subject = db.my_cursor.fetchone()[0]

    subject = subject if subject else active_subject

    query = f"""SELECT subject_id  # –Ω–µ–º–æ–∂–ª–∏–≤–æ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è f-—Å—Ç—Ä—ñ—á–∫–æ—é —á–µ—Ä–µ–∑ –ø—Ä–µ–¥–º–µ—Ç–∏, —â–æ –º–∞—é—Ç—å —É –Ω–∞–∑–≤—ñ –∞–ø–æ—Å—Ç—Ä–æ—Ñ
               FROM `{group_id}`.subjects
               WHERE title = %s;"""
    db.my_cursor.execute(query, (subject,))
    temp = db.my_cursor.fetchone()

    if temp:
        subject_id = temp[0]
        return subject_id
    else:
        return 0


@dp.message_handler(commands='create_queue')
async def create_queue(message: types.Message):
    group_id = str(message.chat.id)
    if not check_database(message):
        await message.answer('üëâ –ë–æ—Ç –¥–ª—è —Ü—ñ—î—ó –≥—Ä—É–ø–∏ —â–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /start')
        return
    await Form.create_queue_st.set()
    subjects = get_subjects(group_id)
    if subjects:
        string = 'üìù –û–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç, –Ω–∞ —è–∫–∏–π —Ö–æ—á–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —á–µ—Ä–≥—É:\n\n'
        for subject, i in zip(subjects, range(len(subjects))):
            string += f'{i + 1}. {subject}\n'
    else:
        string = 'ü´• –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π\n'
    string += '\n–î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç: /add_subject'
    await message.answer(string)


@dp.message_handler(state=Form.create_queue_st)
async def create_queue(message: types.Message, state: FSMContext):
    group_id = str(message.chat.id)
    subjects = get_subjects(group_id)
    subjects_with_queues = get_subjects_with_queues(group_id)

    data = message.values['text']
    if message.values['text'][0] == '/':
        if message.values['text'] == '/back' or message.values['text'] == '/back@kpi_q_bot':
            await state.finish()
            await message.answer('üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–æ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')
            return
        else:
            await message.answer('üìã –ü–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –Ω–æ–≤–æ—ó –∫–æ–º–∞–Ω–¥–∏ '
                                 '–∑–∞–≤–µ—Ä—à—ñ—Ç—å —Ä–æ–±–æ—Ç—É –∑—ñ —Å—Ç–∞—Ä–æ—é –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ—é /back'
                                 '\n\n‚¨Ü –ó–∞—Ä–∞–∑ –±–æ—Ç –¥–æ—Å—ñ –æ—á—ñ–∫—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
            return

    #  –í–∏–±—ñ—Ä –ø—Ä–µ–¥–º–µ—Ç—É –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –Ω–∞–ø–∏—Å–∞–Ω–Ω—è –Ω–∞–∑–≤–æ—é –∞–±–æ –Ω–æ–º–µ—Ä–æ–º
    try:  # –°–ø—Ä–æ–±–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ–≥–æ –≤–≤–æ–¥—É —è–∫ —ñ–Ω—Ç–æ–≤–µ —á–∏—Å–ª–æ. –Ø–∫—â–æ –Ω–µ –≤–∏—Ö–æ–¥–∏—Ç—å - —Å–ø—Ä–∏–π–º–∞—î–º–æ —è–∫ –Ω–∞–∑–≤—É
        data = int(data)
    except ValueError:
        subject = data
    else:
        if 0 < data <= len(subjects):
            subject = subjects[data - 1]
        else:
            await message.answer(f'‚ùì –ü—Ä–µ–¥–º–µ—Ç –∑–∞ –Ω–æ–º–µ—Ä–æ–º {data} –Ω–µ–≤—ñ–¥–æ–º–∏–π'
                                 f'\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /create_queue\n–î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç: /add_subject')
            await state.finish()
            return

    if subject in subjects_with_queues:
        await message.answer(f'üóí –ß–µ—Ä–≥–∞ –Ω–∞ {subject} –≤–∂–µ —ñ—Å–Ω—É—î\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /create_queue')
        await state.finish()
        return
    else:
        subject_id = get_subject_id(group_id, subject)

        if subject_id:
            try:
                db.my_cursor.execute(f'INSERT INTO `{group_id}`.queues (id_queue, subject_id)'
                                     f'VALUES(DEFAULT, %s)', (subject_id,))
            except mysql.connector.DatabaseError:
                await state.finish()
                await message.answer('üîß –í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —ñ–∑ –∑–∞–ø–∏—Ç–æ–º –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /add_subject')
                return
            else:
                db.mydb.commit()
            await message.answer(f'‚úÖ –ß–µ—Ä–≥—É –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç {subject} —Å—Ç–≤–æ—Ä–µ–Ω–æ')
        else:
            await message.answer(f'ü´• –ü—Ä–µ–¥–º–µ—Ç—É {subject} –Ω–µ–º–∞—î —É —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–º–µ—Ç—ñ–≤'
                                 f'\n\n–î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç: /add_subject')

    await state.finish()
    return


@dp.message_handler(commands='clear_queue')
async def clear_queue(message: types.Message):
    group_id = str(message.chat.id)
    if not check_database(message):
        await message.answer('üëâ –ë–æ—Ç –¥–ª—è —Ü—ñ—î—ó –≥—Ä—É–ø–∏ —â–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /start')
        return
    subjects_with_queues = get_subjects_with_queues(group_id)
    if subjects_with_queues:
        await Form.clear_queue_st.set()
        string = 'üìö –°–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤, –Ω–∞ —è–∫—ñ —ñ—Å–Ω—É—é—Ç—å —á–µ—Ä–≥–∏:\n'
        for subject, i in zip(subjects_with_queues, range(len(subjects_with_queues))):
            string += f'{i + 1}. {subject}\n'
        string += '\nüìù –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç—É, –Ω–∞ —è–∫–∏–π –±–∞–∂–∞—î—Ç–µ –æ—á–∏—Å—Ç–∏—Ç–∏ —á–µ—Ä–≥—É'
    else:
        string = 'ü´• –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –∑ —á–µ—Ä–≥–∞–º–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π' \
              '\n\n–°—Ç–≤–æ—Ä–∏—Ç–∏ —á–µ—Ä–≥—É –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç: /create_queue\n–î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç: /add_subject'
    await message.answer(string)


@dp.message_handler(state=Form.clear_queue_st)
async def clear_queue(message: types.Message, state: FSMContext):
    group_id = str(message.chat.id)
    subjects = get_subjects(group_id)
    subjects_with_queues = get_subjects_with_queues(group_id)

    data = message.values['text']
    if message.values['text'][0] == '/':
        if message.values['text'] == '/back' or message.values['text'] == '/back@kpi_q_bot':
            await state.finish()
            await message.answer('üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–æ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')
            return
        else:
            await message.answer('üìã –ü–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –Ω–æ–≤–æ—ó –∫–æ–º–∞–Ω–¥–∏ '
                                 '–∑–∞–≤–µ—Ä—à—ñ—Ç—å —Ä–æ–±–æ—Ç—É –∑—ñ —Å—Ç–∞—Ä–æ—é –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ—é /back'
                                 '\n\n‚¨Ü –ó–∞—Ä–∞–∑ –±–æ—Ç –¥–æ—Å—ñ –æ—á—ñ–∫—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
            return

    try:
        data = int(data)
    except ValueError:
        subject = data
    else:
        if 0 < data <= len(subjects):
            subject = subjects_with_queues[data - 1]
        else:
            await message.answer(f'‚ùì –ü—Ä–µ–¥–º–µ—Ç –∑–∞ –Ω–æ–º–µ—Ä–æ–º {data} –Ω–µ–≤—ñ–¥–æ–º–∏–π'
                                 f'\n\n–î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç: /add_subject')
            await state.finish()
            return

    if subject in subjects:
        if subject in subjects_with_queues:
            delete_users = f"""DELETE sign_ups FROM `{group_id}`.sign_ups
                              JOIN `{group_id}`.queues
                                     USING(id_queue)
                              JOIN `{group_id}`.subjects sb
                                     USING(subject_id)
                              WHERE sb.title = %s;"""
            try:
                db.my_cursor.execute(delete_users, (subject,))
            except mysql.connector.DatabaseError:
                await state.finish()
                await message.answer('üîß –í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —ñ–∑ –∑–∞–ø–∏—Ç–æ–º –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /clear_queue')
                return
            else:
                db.mydb.commit()
            await message.answer(f'üßπ –ß–µ—Ä–≥–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç {subject} –æ—á–∏—â–µ–Ω–∞')
        else:
            await message.answer(f'ü´• –ß–µ—Ä–≥–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç {subject} —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–∞'
                                 f'\n\n–°—Ç–≤–æ—Ä–∏—Ç–∏ —á–µ—Ä–≥—É: /create_queue')
    else:
        await message.answer(f'ü´• –ø—Ä–µ–¥–º–µ—Ç—É {subject} –Ω–µ–º–∞—î —É —Å–ø–∏—Å–∫—É'
                             f'\n\n–î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç: /add_subject')
    db.my_cursor.execute(f'UPDATE `{group_id}`.system_settings SET `active_student` = 0;')
    db.mydb.commit()
    await state.finish()
    return


@dp.message_handler(commands='delete_queue')
async def delete_queue(message: types.Message):
    group_id = str(message.chat.id)
    if not check_database(message):
        await message.answer('üëâ –ë–æ—Ç –¥–ª—è —Ü—ñ—î—ó –≥—Ä—É–ø–∏ —â–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /start')
        return
    subjects_with_queues = get_subjects_with_queues(group_id)

    if subjects_with_queues:
        await Form.delete_queue_st.set()
        string = 'üìö –°–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –∑ —á–µ—Ä–≥–∞–º–∏:\n'
        for i, subject in enumerate(subjects_with_queues):
            string += f'{i + 1}. {subject}\n'
        string += '\n–î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç: /add_subject\n–°—Ç–≤–æ—Ä–∏—Ç–∏ —á–µ—Ä–≥—É: /create_queue'
    else:
        string = 'ü´• –©–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∂–æ–¥–Ω–æ—ó —á–µ—Ä–≥–∏'
        string += '\n\n–°—Ç–≤–æ—Ä–∏—Ç–∏ —á–µ—Ä–≥—É: /create_queue'
    await message.answer(string)


@dp.message_handler(state=Form.delete_queue_st)
async def delete_queue(message: types.Message, state: FSMContext):
    group_id = str(message.chat.id)
    subjects = get_subjects(group_id)
    subjects_with_queues = get_subjects_with_queues(group_id)

    data = message.values['text']
    if message.values['text'][0] == '/':
        if message.values['text'] == '/back' or message.values['text'] == '/back@kpi_q_bot':
            await state.finish()
            await message.answer('üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–æ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')
            return
        else:
            await message.answer('üìã –ü–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –Ω–æ–≤–æ—ó –∫–æ–º–∞–Ω–¥–∏ '
                                 '–∑–∞–≤–µ—Ä—à—ñ—Ç—å —Ä–æ–±–æ—Ç—É –∑—ñ —Å—Ç–∞—Ä–æ—é –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ—é /back'
                                 '\n\n‚¨Ü –ó–∞—Ä–∞–∑ –±–æ—Ç –¥–æ—Å—ñ –æ—á—ñ–∫—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
            return

    try:
        data = int(data)
    except ValueError:
        subject = data
    else:
        if 0 < data <= len(subjects):
            subject = subjects_with_queues[data - 1]
        else:
            await message.answer(f'‚ùì –ü—Ä–µ–¥–º–µ—Ç –∑–∞ –Ω–æ–º–µ—Ä–æ–º {data} –Ω–µ–≤—ñ–¥–æ–º–∏–π'
                                 f'\n\n–î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç: /add_subject\n–°—Ç–≤–æ—Ä–∏—Ç–∏ —á–µ—Ä–≥—É: /create_queue')
            await state.finish()
            return

    if subject in subjects:
        if subject in subjects_with_queues:
            delete_users = f"""DELETE sign_ups FROM `{group_id}`.sign_ups
                              JOIN `{group_id}`.queues
                                  USING(id_queue)
                              JOIN `{group_id}`.subjects sb
                                  USING(subject_id)
                              WHERE sb.title = %s;"""
            try:
                db.my_cursor.execute(delete_users, (subject,))
            except mysql.connector.DatabaseError:
                await state.finish()
                await message.answer('üîß –í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —ñ–∑ –∑–∞–ø–∏—Ç–æ–º –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /delete_queue')
                return
            else:
                db.mydb.commit()
            delete_users = f"""DELETE queues FROM `{group_id}`.queues
                              JOIN `{group_id}`.subjects sb
                                  USING(subject_id)
                              WHERE sb.title = %s;"""
            try:
                db.my_cursor.execute(delete_users, (subject,))
            except mysql.connector.DatabaseError:
                await state.finish()
                await message.answer('üîß –í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —ñ–∑ –∑–∞–ø–∏—Ç–æ–º –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /delete_queue')
                return
            else:
                db.mydb.commit()
            await message.answer(f'üóë –ß–µ—Ä–≥–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç {subject} –≤–∏–¥–∞–ª–µ–Ω–∞')
        else:
            await message.answer(f'ü´• –ß–µ—Ä–≥–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç {subject} —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–∞'
                                 f'\n\n–°—Ç–≤–æ—Ä–∏—Ç–∏ —á–µ—Ä–≥—É: /create_queue')
    else:
        await message.answer(f'‚ùì –ü—Ä–µ–¥–º–µ—Ç –∑–∞ {subject} –Ω–µ–≤—ñ–¥–æ–º–∏–π'
                             f'\n\n–î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç: /add_lesson')
    await state.finish()
    return


@dp.message_handler(commands='show_needed_queue')
async def show_needed_queue(message: types.Message):
    group_id = str(message.chat.id)
    if not check_database(message):
        await message.answer('üëâ –ë–æ—Ç –¥–ª—è —Ü—ñ—î—ó –≥—Ä—É–ø–∏ —â–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /start')
        return
    await Form.show_queue_st.set()
    subjects_with_queues = get_subjects_with_queues(group_id)

    if subjects_with_queues:
        string = 'üìù –í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç, –Ω–∞ —è–∫–∏–π —à—É–∫–∞—î—Ç–µ —á–µ—Ä–≥—É:\n'
        for subject, i in zip(subjects_with_queues, range(len(subjects_with_queues))):
            string += f'{i + 1}. {subject}\n'
        string += '\n‚òù –Ø–∫—â–æ –Ω–∞ –≤–∞—à –ø—Ä–µ–¥–º–µ—Ç —â–µ –Ω–µ–º–∞—î —á–µ—Ä–≥–∏, –í–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —ó—ó'
    else:
        string = 'ü´• –©–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∂–æ–¥–Ω–æ—ó —á–µ—Ä–≥–∏'

    string += '\n\n–°—Ç–≤–æ—Ä–∏—Ç–∏ —á–µ—Ä–≥—É: /create_queue\n'
    string += '–û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø—Ä–µ–¥–º–µ—Ç–∏: /get_subjects\n'
    string += '–î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç: /add_subject'

    await message.answer(string)


@dp.message_handler(state=Form.show_queue_st)
async def show_needed_queue(message: types.Message, state: FSMContext):
    group_id = str(message.chat.id)
    subjects_with_queues = get_subjects_with_queues(group_id)

    data = message.values['text']
    if message.values['text'][0] == '/':
        if message.values['text'] == '/back' or message.values['text'] == '/back@kpi_q_bot':
            await state.finish()
            await message.answer('üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–æ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')
            return
        else:
            await message.answer('üìã –ü–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –Ω–æ–≤–æ—ó –∫–æ–º–∞–Ω–¥–∏ '
                                 '–∑–∞–≤–µ—Ä—à—ñ—Ç—å —Ä–æ–±–æ—Ç—É –∑—ñ —Å—Ç–∞—Ä–æ—é –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ—é /back'
                                 '\n\n‚¨Ü –ó–∞—Ä–∞–∑ –±–æ—Ç –¥–æ—Å—ñ –æ—á—ñ–∫—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
            return
    try:
        data = int(data)
    except ValueError:
        subject = data
    else:
        if 0 < data <= len(subjects_with_queues):
            subject = subjects_with_queues[data - 1]
        else:
            await message.answer(f'ü´• –ù–µ–º–∞—î —á–µ—Ä–≥–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—ñ–¥ –Ω–æ–º–µ—Ä–æ–º {data}\n'
                                 f'\n\n–°—Ç–≤–æ—Ä–∏—Ç–∏ —á–µ—Ä–≥—É: /create_queue\n–î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç: /add_subject')
            await state.finish()
            return

    queue_str = queue_to_str(fetch_queue(group_id, get_subject_id(group_id, subject)))

    await message.answer(queue_str)

    await state.finish()

    return


def fetch_queue(group_id, subject_id):
    query = f"""SELECT position, username, firstname
                FROM `{group_id}`.sign_ups
                INNER JOIN `{group_id}`.students
                ON sign_ups.telegram_user_id = students.telegram_user_id
                AND id_queue = (SELECT id_queue FROM `{group_id}`.queues
                                WHERE subject_id = {subject_id})
                ORDER BY position;"""
    db.my_cursor.execute(query)
    queue = db.my_cursor.fetchall()

    return queue


def get_sign_up(group_id, subject=None, student=None):
    db.my_cursor.execute(f'SELECT `active_subject`, `active_student` FROM `{group_id}`.system_settings;')
    fetched = db.my_cursor.fetchone()
    active_subject = fetched[0] if fetched[0] else ''
    active_student = fetched[1]
    subject = subject if subject else active_subject
    student = student if student else active_student

    sign_up_str = ''
    if not subject or not student:
        sign_up_str += 'üôÑ –ñ–æ–¥–Ω–∞ —á–µ—Ä–≥–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞\n\n–†–æ–∑–ø–æ—á–∞—Ç–∏ —á–µ—Ä–≥—É: /start_queue'
        return sign_up_str

    queue = fetch_queue(group_id, get_subject_id(group_id, subject))

    if queue:
        positions = tuple(map(lambda x: x[0], queue))

        if student != positions[-1] + 1:
            while student not in positions:
                student += 1

            next_st = student + 1
            if student != positions[-1]:
                while next_st not in positions:
                    next_st += 1

            for i, username, firstname in queue:
                if i == student:
                    if username:
                        sign_up_str += f'üü¢ –ó–∞—Ä–∞–∑ –∑–¥–∞—î <b>{firstname} ({username})</b>\n–ú—ñ—Å—Ü–µ –≤ —á–µ—Ä–∑—ñ: {i}\n'
                    else:
                        sign_up_str += f'üü¢ –ó–∞—Ä–∞–∑ –∑–¥–∞—î <b>{firstname}</b>\n–ú—ñ—Å—Ü–µ –≤ —á–µ—Ä–∑—ñ: {i}\n'
                if i == next_st:
                    if username:
                        sign_up_str += f'\n–ù–∞—Å—Ç—É–ø–Ω–∏–º –∑–¥–∞–≤–∞—Ç–∏–º–µ <i>{firstname} ({username})</i>\n'
                    else:
                        sign_up_str += f'\n–ù–∞—Å—Ç—É–ø–Ω–∏–º –∑–¥–∞–≤–∞—Ç–∏–º–µ <i>{firstname}</i>\n'
        else:
            sign_up_str += 'ü´• –ó–∞–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π'
    else:
        sign_up_str += 'ü´• –ß–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è\n'
    sign_up_str += '\n–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –≤ —á–µ—Ä–≥—É: /sign_up <i>{–Ω–æ–º–µ—Ä –∞–±–æ –Ω–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç—É} {–º—ñ—Å—Ü–µ –≤ —á–µ—Ä–∑—ñ (–∑–∞ –±–∞–∂–∞–Ω–Ω—è–º)}</i>' \
                   '\n–í–∏–ø–∏—Å–∞—Ç–∏—Å—è –∑ —á–µ—Ä–≥–∏: /sign_out <i>{–Ω–æ–º–µ—Ä –∞–±–æ –Ω–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç—É}</i>' \
                   '\n–í—Å—ñ –ø—Ä–µ–¥–º–µ—Ç–∏: /all_subjects'

    return sign_up_str


def queue_to_str(queue):
    queue_str = ''
    if queue:
        for i, username, firstname in queue:
            queue_str += f'{i}. {firstname} ({username})\n' if username else f'{i}. {firstname}\n'
    else:
        queue_str += 'ü´• –ß–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è\n'
    queue_str += '\n–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –≤ —á–µ—Ä–≥—É: /sign_up <i>{–Ω–æ–º–µ—Ä –∞–±–æ –Ω–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç—É} {–º—ñ—Å—Ü–µ –≤ —á–µ—Ä–∑—ñ (–∑–∞ –±–∞–∂–∞–Ω–Ω—è–º)}</i>' \
                 '\n–í–∏–ø–∏—Å–∞—Ç–∏—Å—è –∑ —á–µ—Ä–≥–∏: /sign_out <i>{–Ω–æ–º–µ—Ä –∞–±–æ –Ω–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç—É}</i>' \
                 '\n–í—Å—ñ –ø—Ä–µ–¥–º–µ—Ç–∏: /all_subjects'

    return queue_str


def active_queue_to_str(queue, end, active_student=0, next_student=0):
    # —Ñ—É–Ω–∫—Ü—ñ—è, —â–æ –ø—Ä–æ—Å—Ç–æ –≤–∏–≤–æ–¥–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É —á–µ—Ä–≥—É, –Ω–µ –ø–æ–≤–∏–Ω–Ω–∞ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞

    queue_str = ''
    if queue:
        if end:
            for i, username, firstname in queue:
                queue_str += f'<del>{i}. {firstname} ({username})</del>\n' if username else f'<del>{i}. {firstname}</del>\n'
            queue_str += '\n–ß–µ—Ä–≥–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞ üîö\n'
        else:
            for i, username, firstname in queue:
                if i == active_student:
                    queue_str += f'{i}. <b>{firstname} (@{username})</b> üü¢\n' if username else f'{i}. <b>{firstname}</b> üü¢\n'
                elif i == next_student:
                    queue_str += f'{i}. <i>{firstname} (@{username}) ‚Äî –ø—Ä–∏–≥–æ—Ç—É–≤–∞—Ç–∏—Å—è</i>\n' if username else f'{i}. <i>{firstname} ‚Äî –ø—Ä–∏–≥–æ—Ç—É–≤–∞—Ç–∏—Å—è</i>\n'
                elif i < active_student:
                    queue_str += f'<del>{i}. {firstname} ({username})</del>\n' if username else f'<del>{i}. {firstname}</del>\n'
                else:
                    queue_str += f'{i}. {firstname} ({username})\n' if username else f'{i}. {firstname}\n'
            queue_str += '\n–ß–µ—Ä–≥–∞ –∞–∫—Ç–∏–≤–Ω–∞ ‚òë\n'
    else:
        queue_str += 'ü´• –ß–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è\n'
    queue_str += '\n–ó–∞–ø–∏—Å–∞—Ç–∏—Å—è –≤ —á–µ—Ä–≥—É: /sign_up <i>{–Ω–æ–º–µ—Ä –∞–±–æ –Ω–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç—É} {–º—ñ—Å—Ü–µ –≤ —á–µ—Ä–∑—ñ (–∑–∞ –±–∞–∂–∞–Ω–Ω—è–º)}</i>' \
                 '\n–í–∏–ø–∏—Å–∞—Ç–∏—Å—è –∑ —á–µ—Ä–≥–∏: /sign_out <i>{–Ω–æ–º–µ—Ä –∞–±–æ –Ω–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç—É}</i>' \
                 '\n–í–∏–¥–∞–ª–∏—Ç–∏ —á–µ—Ä–≥—É: /delete_queue' \
                 '\n–í—Å—ñ –ø—Ä–µ–¥–º–µ—Ç–∏: /all_subjects'

    return queue_str


def add_user(user, group_id):
    user_id = user.id
    name = user.first_name
    username = user.username if user.username else None

    # –ó–∞–ø–∏—Å—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—É, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
    get_user = f'SELECT * FROM `{group_id}`.students WHERE telegram_user_id = %s'
    db.my_cursor.execute(get_user, (user_id,))
    exists = db.my_cursor.fetchone()

    if not exists:
        put_user = f'INSERT INTO `{group_id}`.students VALUES(%s, %s, %s)'
        db.my_cursor.execute(put_user, (user_id, username, name))  # –≤—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–∏—Ö —ñ —Ç–∞–∫ –±–µ–∑–ø–µ—á–Ω–∞
        db.mydb.commit()
    return


@dp.message_handler(commands='start_queue')
async def start_queue(message: types.Message):
    group_id = str(message.chat.id)
    if not check_database(message):
        await message.answer('üëâ –ë–æ—Ç –¥–ª—è —Ü—ñ—î—ó –≥—Ä—É–ø–∏ —â–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /start')
        return

    subjects_with_queues = get_subjects_with_queues(group_id)

    if subjects_with_queues:
        await Form.start_queue_st.set()
        string = 'üìù –í–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∑–∞–ø—É—Å–∫—É —á–µ—Ä–≥–∏:\n'
        for subject, i in zip(subjects_with_queues, range(len(subjects_with_queues))):
            string += f'{i + 1}. {subject}\n'
        string += '\n‚òù –Ø–∫—â–æ –Ω–∞ –≤–∞—à –ø—Ä–µ–¥–º–µ—Ç —â–µ –Ω–µ–º–∞—î —á–µ—Ä–≥–∏, –í–∏ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —ó—ó'
    else:
        string = 'ü´• –©–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∂–æ–¥–Ω–æ—ó —á–µ—Ä–≥–∏'
    string += '\n\n–°—Ç–≤–æ—Ä–∏—Ç–∏ —á–µ—Ä–≥—É: /create_queue'
    # –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –≤ —Ü—å–æ–º—É –≤–∏–ø–∞–¥–∫—É –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–¥–Ω–∞–∫–æ–≤—É –ø—ñ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –æ–±–æ—Ö –≤–∏–ø–∞–¥–∫—ñ–≤ if/else

    await message.answer(string)


@dp.message_handler(state=Form.start_queue_st)
async def start_queue(message: types.Message, state: FSMContext):
    group_id = str(message.chat.id)
    subjects_with_queues = get_subjects_with_queues(group_id)

    data = message.values['text']
    if message.values['text'][0] == '/':
        if message.values['text'] == '/back' or message.values['text'] == '/back@kpi_q_bot':
            await state.finish()
            await message.answer('üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–æ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')
            return
        else:
            await message.answer('üìã –ü–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –Ω–æ–≤–æ—ó –∫–æ–º–∞–Ω–¥–∏ '
                                 '–∑–∞–≤–µ—Ä—à—ñ—Ç—å —Ä–æ–±–æ—Ç—É –∑—ñ —Å—Ç–∞—Ä–æ—é –∞–±–æ –ø–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥–æ—é /back'
                                 '\n\n‚¨Ü –ó–∞—Ä–∞–∑ –±–æ—Ç –¥–æ—Å—ñ –æ—á—ñ–∫—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è')
            return

    try:
        data = int(data)
    except ValueError:
        if data in subjects_with_queues:
            active_subject = data
            db.my_cursor.execute(f'UPDATE `{group_id}`.system_settings SET `active_subject` = {active_subject};')
            db.mydb.commit()
        else:
            await message.answer(f'ü´• –ù–µ–º–∞—î —á–µ—Ä–≥–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—ñ–¥ –Ω–∞–∑–≤–æ—é {data}'
                                 f'\n\n–°—Ç–≤–æ—Ä–∏—Ç–∏ —á–µ—Ä–≥—É: /create_queue\n–î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç: /add_subject')
            await state.finish()
            return
    else:
        if 0 < data <= len(subjects_with_queues):
            active_subject = subjects_with_queues[data - 1]
            db.my_cursor.execute(f"UPDATE `{group_id}`.system_settings SET `active_subject` = '{active_subject}';")
            db.mydb.commit()
        else:
            await message.answer(f'ü´• –ù–µ–º–∞—î —á–µ—Ä–≥–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—ñ–¥ –Ω–æ–º–µ—Ä–æ–º {data}'
                                 f'\n\n–°—Ç–≤–æ—Ä–∏—Ç–∏ —á–µ—Ä–≥—É: /create_queue\n–î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç: /add_subject')
            await state.finish()
            return

    active_student = 0
    db.my_cursor.execute(f"UPDATE `{group_id}`.system_settings SET `active_student` = '{active_student}';")
    db.mydb.commit()

    await next(message)

    await state.finish()

    return


@dp.message_handler(commands='next')
async def next(message: types.Message):
    group_id = str(message.chat.id)
    if not check_database(message):
        await message.answer('üëâ –ë–æ—Ç –¥–ª—è —Ü—ñ—î—ó –≥—Ä—É–ø–∏ —â–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /start')
        return
    db.my_cursor.execute(f'SELECT `active_subject`, `active_student` FROM `{group_id}`.system_settings;')
    fetched = db.my_cursor.fetchone()
    active_subject = fetched[0]
    active_student = fetched[1]

    if not active_subject:
        await message.answer('üôÑ –ñ–æ–¥–Ω–∞ —á–µ—Ä–≥–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞\n\n–†–æ–∑–ø–æ—á–∞—Ç–∏ —á–µ—Ä–≥—É: /start_queue')
        return
    else:
        active_student += 1

    queue = fetch_queue(group_id, get_subject_id(group_id))

    positions = tuple(map(lambda x: x[0], queue))

    if queue and active_student != positions[-1] + 1:
        # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —á–µ—Ä–≥–∏ –Ω–∞ –≤–∏—â–æ–º—É —Ä—ñ–≤–Ω—ñ –∑–∞ —Ñ—É–Ω–∫—Ü—ñ—é active_queue_to_str()
        # –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–ª—è —Ç–æ–≥–æ, —â–æ–± –∑–∞–ø–æ–±—ñ–≥—Ç–∏ –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–æ–º—É –≤–∏–∫–æ–Ω–∞–Ω–Ω—é —Ü–∏–∫–ª—ñ–≤ while
        # —ñ —É–±–µ–∑–ø–µ—á–∏—Ç–∏—Å—è –≤—ñ–¥ –∑–º—ñ–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
        end = False

        while active_student not in positions:
            active_student += 1
        db.my_cursor.execute(f'UPDATE `{group_id}`.system_settings SET `active_student` = {active_student};')
        db.mydb.commit()

        next_student = active_student + 1
        if active_student != positions[-1]:
            print(f'–ú–∏ –ø—Ä–æ–π—à–ª–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ –Ω–µ–æ—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç, –∫–æ–ª–∏ active_student —Ç–∞ next_student '
                  f'–º–∞–ª–∏ –∑–Ω–∞—á–µ–Ω–Ω—è {active_student} —Ç–∞ {next_student}. –û—Å—Ç–∞–Ω–Ω—ñ–π –µ–ª–µ–º–µ–Ω—Ç –≤ –ø–æ–∑–∏—à–∏–Ω—Å: {positions[-1]}')
            while next_student not in positions:
                next_student += 1
        print(next_student)
        queue_str = active_queue_to_str(queue, end, active_student, next_student)
    else:
        if not queue:
            active_student = 0
            db.my_cursor.execute(f'UPDATE `{group_id}`.system_settings SET `active_student` = {active_student};')
            db.mydb.commit()
        end = True
        queue_str = active_queue_to_str(queue, end)

        active_subject = ''
        active_student = 0
        db.my_cursor.execute(f"UPDATE `{group_id}`.system_settings "
                             f"SET `active_student` = {active_student}, `active_subject` = '{active_subject}';")
        db.mydb.commit()

    await message.answer(queue_str)


@dp.message_handler(commands='skip')
async def skip(message: types.Message):
    group_id = str(message.chat.id)
    db.my_cursor.execute(f'SELECT `active_subject`, `active_student` FROM `{group_id}`.system_settings;')
    fetched = db.my_cursor.fetchone()
    active_subject = fetched[0]
    active_student = fetched[1]

    if not check_database(message):
        await message.answer('üëâ –ë–æ—Ç –¥–ª—è —Ü—ñ—î—ó –≥—Ä—É–ø–∏ —â–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /start')
        return
    if not active_subject:
        await message.answer('üôÑ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞(-—ñ–≤) –º–æ–∂–Ω–∞ –ª–∏—à–µ –≤ –∞–∫—Ç–∏–≤–Ω—ñ–π —á–µ—Ä–∑—ñ!')
        return

    user = message.from_user
    add_user(user, group_id)
    user_id = user.id
    user_name = user.first_name

    arguments = message.get_args().split(' ')
    if len(arguments) not in (0, 1):
        await message.answer('üóø –í–∏ –≤–≤–µ–ª–∏ –∑–∞–±–∞–≥–∞—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤'
                             '\n\n‚òù –ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—Ü—å, –≤ —á–µ—Ä–∑—ñ, —è–∫—ñ –í–∏ —Ö–æ—á–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏, '
                             '–∞–±–æ –∂ –Ω–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏ –Ω—ñ—á–æ–≥–æ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞–Ω–Ω—è –æ–¥–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞'
                             '\n\nüëâ –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /skip –∞–±–æ /skip 3')
        return

    arguments = ''.join(arguments)
    if arguments:
        try:
            arguments = int(arguments)
        except ValueError:
            await message.answer('1Ô∏è‚É£  –ê—Ä–≥—É–º–µ–Ω—Ç –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –ª–∏—à–µ —á–∏—Å–ª–æ–º!')
            return
    else:
        arguments = 1
    to_skip = arguments

    get_queue_id = f"""SELECT id_queue
                      FROM `{group_id}`.queues
                      JOIN `{group_id}`.subjects sb
                          USING (subject_id)
                      WHERE sb.title = %s;"""
    db.my_cursor.execute(get_queue_id, (active_subject,))
    id_queue = db.my_cursor.fetchone()[0]

    check_sign_up = f"""SELECT position
                       FROM `{group_id}`.sign_ups
                       WHERE telegram_user_id = %s
                       AND id_queue = %s;"""
    db.my_cursor.execute(check_sign_up, (user_id, id_queue))
    position = db.my_cursor.fetchone()

    if not position:
        await message.answer('üìú –í–∏ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ñ –≤ –∞–∫—Ç–∏–≤–Ω—É —á–µ—Ä–≥—É, —â–æ–± –ø—Ä–æ–ø—É—Å–∫–∞—Ç–∏ –∫–æ–≥–æ—Å—å')
        return

    position = position[0]
    if position >= active_student:  # –ø–æ—Ñ—ñ–∫—Å–∏—Ç–∏ –±–∞–≥ –∑ –ø—Ä–æ–ø—É—Å–∫–æ–º –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ñ
        queue = fetch_queue(group_id, get_subject_id(group_id))
        positions = tuple(map(lambda x: x[0], queue))

        position_index = 0
        for index, k in enumerate(positions):
            if k == position:
                position_index = index

        index_to_jump_to = position_index + to_skip
        if index_to_jump_to <= positions.index(positions[-1]):
            range_of_indeces = slice(position_index+1, index_to_jump_to+1)
        else:
            await message.answer('üîö –ù–µ–º–æ–∂–ª–∏–≤–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –±—ñ–ª—å—à–µ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤, '
                                 f'–Ω—ñ–∂ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ —á–µ—Ä–∑—ñ –ø—ñ—Å–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {user_name}')
            return

        delete_sign_up = f"""DELETE FROM `{group_id}`.sign_ups
                             WHERE id_queue = {id_queue} AND position = {position};"""
        try:
            db.my_cursor.execute(delete_sign_up)
        except mysql.connector.DatabaseError:
            await message.answer('üîß –í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —ñ–∑ –∑–∞–ø–∏—Ç–æ–º –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /skip')
            return
        else:
            db.mydb.commit()

        move_sign_ups = f"""UPDATE `{group_id}`.sign_ups
                           SET position = position - 1
                           WHERE id_queue = {id_queue} AND position """  # (...)
        if len(positions[range_of_indeces]) == 1:
            move_sign_ups += f'= {positions[range_of_indeces][0]};'
        else:
            move_sign_ups += f'IN {positions[range_of_indeces]};'

        print(move_sign_ups)
        try:
            db.my_cursor.execute(move_sign_ups)
        except mysql.connector.DatabaseError:
            await message.answer('üîß –í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —ñ–∑ –∑–∞–ø–∏—Ç–æ–º –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /skip')
            return
        else:
            db.mydb.commit()

        make_sign_up = f"""INSERT INTO `{group_id}`.sign_ups
                           VALUES (DEFAULT, {id_queue}, {user_id}, {positions[index_to_jump_to]});"""
        print(make_sign_up)
        try:
            db.my_cursor.execute(make_sign_up)
        except mysql.connector.DatabaseError:
            await message.answer('üîß –í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —ñ–∑ –∑–∞–ø–∏—Ç–æ–º –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö'
                                 '\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /skip <i>{–∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—Ü—å (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: 1)}</i>')
            return
        else:
            db.mydb.commit()

        if db.my_cursor.rowcount < 1:
            await message.answer('üîß –í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —ñ–∑ –∑–∞–ø–∏—Ç–æ–º –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö'
                                 '\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /skip <i>{–∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—Ü—å (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: 1)}</i>')
        else:
            if to_skip == 1:
                await message.answer(f'üîÉ {user_name} –ø—Ä–æ–ø—É—Å—Ç–∏–≤(-–ª–∞) 1 —Å—Ç—É–¥–µ–Ω—Ç–∞')
            else:
                await message.answer(f'üîÉ {user_name} –ø—Ä–æ–ø—É—Å—Ç–∏–≤(-–ª–∞) {to_skip} —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤')

            next_student = active_student + 1
            if active_student != positions[-1]:
                while next_student not in positions:
                    next_student += 1

            if next_student != active_student + 1 and position == active_student:
                await next(message)
            else:
                queue = fetch_queue(group_id, get_subject_id(group_id))  # –ø–æ–≤—Ç–æ—Ä–Ω–∏–π —Ñ–µ—Ç—á–∏–Ω–≥ —á–µ—Ä–≥–∏ (–≤–∂–µ –æ–Ω–æ–≤–ª–µ–Ω–æ—ó)
                await message.answer(active_queue_to_str(queue, False, active_student, next_student))
    else:
        await message.answer('üôÑ –í–∏ –≤–∂–µ –∑–¥–∞–ª–∏!')
    return


@dp.message_handler(commands='show_current_student')
async def show_current_student(message: types.Message):
    group_id = str(message.chat.id)
    if not check_database(message):
        await message.answer('üëâ –ë–æ—Ç –¥–ª—è —Ü—ñ—î—ó –≥—Ä—É–ø–∏ —â–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /start')
        return
    await message.answer(get_sign_up(group_id))


@dp.message_handler(commands='all_teachers')
async def all_teachers(message: types.Message):
    group_id = str(message.chat.id)
    if not check_database(message):
        await message.answer('üëâ –ë–æ—Ç –¥–ª—è —Ü—ñ—î—ó –≥—Ä—É–ø–∏ —â–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /start')
        return
    teachers = get_teachers_with_all_info(group_id)
    teachers_lists = []
    for teacher in teachers:
        teacher_id = get_teacher_id(group_id, teacher[1])

        sql = f"""SELECT title FROM `{group_id}`.subjects
                  WHERE id_teacher = {teacher_id};"""
        db.my_cursor.execute(sql)
        temp = db.my_cursor.fetchall()

        teacher_subjects = []
        for subject in temp:
            teacher_subjects.append(subject[0])
        teacher_subjects = ', '.join(teacher_subjects)

        lst_teacher = list(teacher)
        lst_teacher.append(teacher_subjects)
        teachers_lists.append(lst_teacher)

    if teachers:
        all_teachers_str = 'üë©‚Äçüè´ –°–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤:\n'
        for i, name, username, phone, email, info, subjects in teachers_lists:
            username = username if username else '(–Ω–µ–º–∞—î)'
            phone = phone if phone else '(–Ω–µ–º–∞—î)'
            email = email if email else '(–Ω–µ–º–∞—î)'
            info = info if info else '</i>(–Ω–µ–º–∞—î)<i>'
            subjects = subjects if subjects else '(–Ω—ñ—á–æ–≥–æ)'
            teacher_str = f'\n<b>{i}. {name}</b>\n' \
                          f'  üí¨  {username}\n' \
                          f'  üì±  {phone}\n' \
                          f'  ‚úâ  {email}\n' \
                          f'  üìï  {subjects}\n' \
                          f'  ‚Ñπ  <i>{info}</i>\n'

            str_len = len(all_teachers_str) + len(teacher_str)
            if str_len > 4096:
                await message.answer(all_teachers_str)
                all_teachers_str = teacher_str
            else:
                all_teachers_str += teacher_str
    else:
        all_teachers_str = 'ü´• –°–ø–∏—Å–æ–∫ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π\n'

    add_teacher_hint = '\n–î–æ–¥–∞—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á–∞: /add_teacher'
    if len(all_teachers_str) + len(add_teacher_hint) < 4096:
        all_teachers_str += add_teacher_hint
        await message.answer(all_teachers_str)
    else:
        await message.answer(all_teachers_str)
        await message.answer(add_teacher_hint)
    return


@dp.message_handler(commands='all_subjects')
async def all_subjects(message: types.Message):
    group_id = str(message.chat.id)
    if not check_database(message):
        await message.answer('üëâ –ë–æ—Ç –¥–ª—è —Ü—ñ—î—ó –≥—Ä—É–ø–∏ —â–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /start')
        return
    query = f"""SELECT subjects.title, teachers.name
               FROM `{group_id}`.subjects
               LEFT OUTER JOIN `{group_id}`.teachers
                   USING (id_teacher)
               ORDER BY subject_id;"""
    db.my_cursor.execute(query)
    subjects = db.my_cursor.fetchall()

    all_subjects_str = 'üìö –°–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤:\n'
    if subjects:
        for i, (title, teacher_name) in enumerate(subjects):
            all_subjects_str += f'\n{i + 1}. {title}\n–í–∏–∫–ª–∞–¥–∞—î: {teacher_name}\n'
    else:
        all_subjects_str += 'ü´• –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π\n'
    all_subjects_str += '\n–î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç: /add_subject'

    await message.answer(all_subjects_str)
    return


@dp.message_handler(commands='all_students')
async def all_students(message: types.Message):
    group_id = str(message.chat.id)
    if not check_database(message):
        await message.answer('üëâ –ë–æ—Ç –¥–ª—è —Ü—ñ—î—ó –≥—Ä—É–ø–∏ —â–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /start')
        return
    query = f"""SELECT username, firstname FROM `{group_id}`.students
               ORDER BY firstname;"""
    db.my_cursor.execute(query)
    students = db.my_cursor.fetchall()

    all_students_str = 'üßë‚Äçüéì –°–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤:\n\n'
    if students:
        for i, (username, firstname) in enumerate(students):
            all_students_str += f'{i + 1}. {firstname} ({username})\n'
    else:
        all_students_str += 'ü´• –°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π\n'

    await message.answer(all_students_str)
    return


@dp.message_handler(commands='set_max')
async def set_max(message: types.Message):
    group_id = str(message.chat.id)
    if not check_database(message):
        await message.answer('üëâ –ë–æ—Ç –¥–ª—è —Ü—ñ—î—ó –≥—Ä—É–ø–∏ —â–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /start')
        return
    arguments = message.get_args()

    try:
        number = int(arguments)
    except ValueError:
        await message.answer('1Ô∏è‚É£ –©–æ–± –≤–∏—Å—Ç–∞–≤–∏—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –¥–æ–≤–∂–∏–Ω—É —á–µ—Ä–≥–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ —á–∏—Å–ª–æ, –±—ñ–ª—å—à–µ –∑–∞ –Ω—É–ª—å'
                             '\nüëâ –ù–∞–ø—Ä–∏–∫–ª–∞–¥, /set_max 30')
        return

    if number < 1 or number > 500:
        await message.answer('‚òù –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ —á–µ—Ä–≥–∏ - 1 —Å—Ç—É–¥–µ–Ω—Ç, –∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ - 500 —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤'
                             '\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –∑–∞–¥–∞—Ç–∏ –¥–æ–≤–∂–∏–Ω—É —â–µ —Ä–∞–∑: /set_max <i>{–∑–∞—Ç—Ä–µ–±—É–≤–∞–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ —á–µ—Ä–≥–∏}</i>')
        return

    db.my_cursor.execute(f'UPDATE `{group_id}`.system_settings SET `max_in_queue` = {number};')
    db.mydb.commit()

    await message.answer(f'üîÑ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ —á–µ—Ä–≥–∏ —Ç–µ–ø–µ—Ä {number}')
    return


def get_first_free_pos(group_id, positions):
    db.my_cursor.execute(f'SELECT `active_student`, `max_in_queue` FROM `{group_id}`.system_settings;')
    fetched = db.my_cursor.fetchone()
    active_student = fetched[0]
    max_in_queue = fetched[1]

    if not positions:
        return 1
    for i in range(active_student, max_in_queue):  # –∑—Ä–æ–±–∏—Ç–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å
        if i and i not in positions:
            return i

    return None


@dp.message_handler(commands='sign_up')
async def sign_up(message: types.Message):
    group_id = str(message.chat.id)
    db.my_cursor.execute(f'SELECT `active_student`, `max_in_queue` FROM `{group_id}`.system_settings;')
    fetched = db.my_cursor.fetchone()
    active_student = fetched[0]
    max_in_queue = fetched[1]

    if not check_database(message):
        await message.answer('üëâ –ë–æ—Ç –¥–ª—è —Ü—ñ—î—ó –≥—Ä—É–ø–∏ —â–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /start')
        return
    user = message.from_user
    add_user(user, group_id)
    user_id = user.id
    user_name = user.first_name

    arguments = message.get_args().split(' ')

    if not arguments:
        await message.answer('üóø –í–∏ –Ω–µ –≤–≤–µ–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∏!'
                             '\n\n‚òù –ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –Ω–∞–∑–≤—É –∞–±–æ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç—É, –≤ —á–µ—Ä–≥—É –Ω–∞ —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è'
                             '\n\nüíÅ –ó–∞ –±–∞–∂–∞–Ω–Ω—è–º —Ç–∞–∫–æ–∂ –º–æ–∂–Ω–∞ –≤–∫–∞–∑–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –ø–æ–∑–∏—Ü—ñ—é –≤ —á–µ—Ä–∑—ñ, —è–∫—â–æ –≤–æ–Ω–∞ –≤—ñ–ª—å–Ω–∞'
                             '\n\nüëâ –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /sign_up –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∞–±–æ /sign_up –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ 5')
        return
    if arguments[0] == '':
        await message.answer('üóø –í–∏ –Ω–µ –≤–≤–µ–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∏!'
                             '\n\n‚òù –ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –Ω–∞–∑–≤—É –∞–±–æ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç—É, –≤ —á–µ—Ä–≥—É –Ω–∞ —è–∫–∏–π —Ö–æ—á–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è'
                             '\n\nüíÅ –ó–∞ –±–∞–∂–∞–Ω–Ω—è–º —Ç–∞–∫–æ–∂ –º–æ–∂–Ω–∞ –≤–∫–∞–∑–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –ø–æ–∑–∏—Ü—ñ—é –≤ —á–µ—Ä–∑—ñ, —è–∫—â–æ –≤–æ–Ω–∞ –≤—ñ–ª—å–Ω–∞'
                             '\n\nüëâ –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /sign_up –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∞–±–æ /sign_up –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ 5')
        return

    if len(arguments) >= 2:
        try:
            position = int(arguments[-1])
        except ValueError:
            position = None
        else:
            del arguments[-1]
        subject_input = ' '.join(arguments)
    else:  # if len(arguments) == 1:
        position = None
        subject_input = arguments[0]

    subjects = get_subjects(group_id)
    sub_with_queue = get_subjects_with_queues(group_id)

    try:
        subject_number = int(subject_input)
    except ValueError:
        subject = subject_input
    else:
        if 0 < subject_number <= len(subjects):
            subject = subjects[subject_number - 1]
        else:
            await message.answer(f'‚ùì –ü—Ä–µ–¥–º–µ—Ç –∑–∞ –Ω–æ–º–µ—Ä–æ–º {subject_number} –Ω–µ–≤—ñ–¥–æ–º–∏–π\n\n–î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç: /add_subject')
            return

    if subject not in subjects:
        await message.answer(f'‚ùì –ü—Ä–µ–¥–º–µ—Ç {subject} –Ω–µ–≤—ñ–¥–æ–º–∏–π\n\n–î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç: /add_subject')
        return

    if subject not in sub_with_queue:
        await message.answer(f'ü´• –ü—Ä–µ–¥–º–µ—Ç {subject} –Ω–µ –º–∞—î —á–µ—Ä–≥–∏\n\n–°—Ç–≤–æ—Ä–∏—Ç–∏ —á–µ—Ä–≥—É: /create_queue')
        return

    check_stundent = f"""SELECT su.position
                        FROM `{group_id}`.sign_ups su
                        JOIN `{group_id}`.students st
                            USING (telegram_user_id)
                        JOIN `{group_id}`.queues qu
                            USING (id_queue)
                        JOIN `{group_id}`.subjects sb
                            USING (subject_id)
                        WHERE st.telegram_user_id = %s and sb.title = %s"""
    db.my_cursor.execute(check_stundent, (user_id, subject))
    exist_pos = db.my_cursor.fetchall()
    exist_pos = tuple(map(lambda x: x[0], exist_pos))

    if exist_pos:
        max_pos = max(exist_pos)
    else:
        max_pos = 0

    if max_pos > active_student:
        await message.answer(f'üìÉ {user_name} –≤–∂–µ –∑–∞–ø–∏—Å–∞–Ω–∏–π(-–∞) –≤ —Ü—é —á–µ—Ä–≥—É –Ω–∞ –º—ñ—Å—Ü–µ {exist_pos[0]}'
                             f'\n\n‚òù –©–æ–± –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ —ñ–Ω—à–µ –º—ñ—Å—Ü–µ, —Å–ø–æ—á–∞—Ç–∫—É –≤–∏–ø–∏—à—ñ—Ç—å—Å—è –∑ —á–µ—Ä–≥–∏, '
                             f'–∞ —Ç–æ–¥—ñ –∑–∞–ø–∏—à—ñ—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ'
                             '\n\n–í–∏–ø–∏—Å–∞—Ç–∏—Å—è –∑ —á–µ—Ä–≥–∏: /sign_out <i>{–Ω–æ–º–µ—Ä –∞–±–æ –Ω–∞–∑–≤–∞ –ø—Ä–µ–¥–º–µ—Ç—É}</i>')
        return

    if not position:  # –í–∏–ø–∞–¥–æ–∫, –∫–æ–ª–∏ —é–∑–µ—Ä –≤–∫–∞–∑–∞–≤ –ª–∏—à–µ –Ω–∞–∑–≤—É –ø—Ä–µ–¥–º–µ—Ç—É. –ó–∞–ø–∏—Å—É—î–º–æ –Ω–∞ –ø–µ—Ä—à–µ –≤—ñ–ª—å–Ω–µ –º—ñ—Å—Ü–µ
        get_all_from_queue = f"""SELECT position
                                FROM `{group_id}`.sign_ups
                                JOIN `{group_id}`.queues
                                    USING (id_queue)
                                JOIN `{group_id}`.subjects sb
                                    USING (subject_id)
                                WHERE sb.title = %s"""
        db.my_cursor.execute(get_all_from_queue, (subject,))
        positions = db.my_cursor.fetchall()
        positions = tuple(map(lambda x: x[0], positions))
        position = get_first_free_pos(group_id, positions)

        if not position:
            await message.answer('üôÜ‚Äç‚ôÄ –ß–µ—Ä–≥–∞ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞'
                                 '\n\n‚òù –ú–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —É —á–µ—Ä–∑—ñ –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö')
            return

    else:  # –í–∏–ø–∞–¥–æ–∫, –∫–æ–ª–∏ —é–∑–µ—Ä –≤–∫–∞–∑–∞–≤ –Ω–∞–∑–≤—É –ø—Ä–µ–¥–º–µ—Ç—É —Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –º—ñ—Å—Ü–µ –≤ —á–µ—Ä–∑—ñ
        # try:
        #     position = int(arguments[1])
        # except ValueError:
        #     await message.answer('üóø –í–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∫–∞–∑—É—î—Ç–µ –Ω–æ–º–µ—Ä —É —á–µ—Ä–∑—ñ'
        #                          '\n\n‚òù –ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –Ω–∞–∑–≤—É –∞–±–æ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç—É —Ç–∞ –±–∞–∂–∞–Ω–∏–π –Ω–æ–º–µ—Ä —É —á–µ—Ä–∑—ñ,'
        #                          '–≤ —á–µ—Ä–≥—É —è–∫–æ–≥–æ –±–∞–∂–∞—î—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—è'
        #                          '\n\nüëâ –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /sign_up –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ 5')
        #     return

        if position < 0 or position > max_in_queue:
            await message.answer(f'üôÜ‚Äç‚ôÄ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –Ω–æ–º–µ—Ä —É —á–µ—Ä–∑—ñ: {max_in_queue}')
            return

        if position <= active_student:
            await message.answer(f'üèÉ‚Äç‚ôÇ –ß–µ—Ä–≥–∞ –≤–∂–µ –ø—Ä–æ–π—à–ª–∞ –º—ñ—Å—Ü–µ {position}. '
                                 f'–ó–∞—Ä–∞–∑ –∑–¥–∞—î —Å—Ç—É–¥–µ–Ω—Ç –Ω–∞ –ø–æ–∑–∏—Ü—ñ—ó {active_student}\n\n'
                                 f'‚§µ –ó–∞–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –º—ñ—Å—Ü–µ –ø–æ–ø–µ—Ä–µ–¥—É!')
            return

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –≤–∂–µ –Ω–∞ —Ü—å–æ–º—É –º—ñ—Å—Ü—ñ –∑–∞–ø–∏—Å–∞–Ω–∏–π —Å—Ç—É–¥–µ–Ω—Ç
        check_student_by_pos = f"""SELECT st.firstname
                                   FROM `{group_id}`.sign_ups su
                                   JOIN `{group_id}`.students st
                                       USING (telegram_user_id)
                                   JOIN `{group_id}`.queues qu
                                       USING (id_queue)
                                   JOIN `{group_id}`.subjects sb
                                       USING (subject_id)
                                   WHERE su.position = %s and sb.title = %s"""

        db.my_cursor.execute(check_student_by_pos, (position, subject))
        name_of_student = db.my_cursor.fetchone()

        if name_of_student:
            await message.answer(f'üòî –ù–∞ —Ü—é –ø–æ–∑–∏—Ü—ñ—é –≤–∂–µ –∑–∞–ø–∏—Å–∞–Ω–∏–π(-–∞) {name_of_student[0]}')
            return

    get_id_queue = f"""SELECT id_queue
                      FROM `{group_id}`.queues
                      JOIN `{group_id}`.subjects sb
                        USING (subject_id)
                      WHERE sb.title = %s"""
    db.my_cursor.execute(get_id_queue, (subject,))
    id_queue = db.my_cursor.fetchone()[0]

    sign_up_student = f"""INSERT INTO `{group_id}`.sign_ups
                         VALUES(DEFAULT, %s, %s, %s)"""
    try:
        db.my_cursor.execute(sign_up_student, (id_queue, user_id, position))
    except mysql.connector.DatabaseError:
        await message.answer('üîß –í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —ñ–∑ –∑–∞–ø–∏—Ç–æ–º –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /sign_up')
        return
    else:
        db.mydb.commit()

    await message.answer(f'‚úç {user_name} –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ —á–µ—Ä–≥—É –Ω–∞ {subject} –ø—ñ–¥ –Ω–æ–º–µ—Ä–æ–º {position}')
    return


@dp.message_handler(commands='sign_out')
async def sign_out(message: types.Message):
    group_id = str(message.chat.id)
    if not check_database(message):
        await message.answer('üëâ –ë–æ—Ç –¥–ª—è —Ü—ñ—î—ó –≥—Ä—É–ø–∏ —â–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∏–π. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –π–æ–≥–æ –∫–æ–º–∞–Ω–¥–æ—é /start')
        return

    user = message.from_user
    add_user(user, group_id)
    user_id = user.id
    user_name = user.first_name

    data = message.get_args()
    if not data:
        await message.answer('üóø –í–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–æ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É'
                             '\n\n‚òù –ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –Ω–∞–∑–≤—É –∞–±–æ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç—É, —á–µ—Ä–≥—É –Ω–∞ —è–∫–∏–π –í–∏ —Ö–æ—á–µ—Ç–µ –ø–æ–∫–∏–Ω—É—Ç–∏'
                             '\n\nüëâ –ù–∞–ø—Ä–∏–∫–ª–∞–¥ /sign_out –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞')
        return

    subjects = get_subjects(group_id)
    sub_with_queue = get_subjects_with_queues(group_id)

    try:
        data = int(data)
    except ValueError:
        subject = data
    else:
        if 0 < data <= len(subjects):
            subject = subjects[data - 1]
        else:
            await message.answer(f'‚ùì –ü—Ä–µ–¥–º–µ—Ç –∑–∞ –Ω–æ–º–µ—Ä–æ–º {data} –Ω–µ–≤—ñ–¥–æ–º–∏–π'
                                 f'\n\n–î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç: /add_subject')
            return

    if subject in subjects:
        if subject in sub_with_queue:

            get_queue_id = f"""SELECT id_queue 
                              FROM `{group_id}`.queues 
                              JOIN `{group_id}`.subjects sb
                                  USING (subject_id)
                              WHERE sb.title = %s"""
            db.my_cursor.execute(get_queue_id, (subject,))
            id_queue = db.my_cursor.fetchone()[0]

            check_sign_up = f"""SELECT position
                               FROM `{group_id}`.sign_ups
                               WHERE telegram_user_id = %s
                               AND id_queue = %s;"""
            db.my_cursor.execute(check_sign_up, (user_id, id_queue))
            position = db.my_cursor.fetchone()

            if position:
                position = position[0]

                delete_sign_up = f"""DELETE FROM `{group_id}`.sign_ups
                                     WHERE id_queue = {id_queue} AND position = {position};"""
                try:
                    db.my_cursor.execute(delete_sign_up)
                except mysql.connector.DatabaseError:
                    await message.answer('üîß –í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —ñ–∑ –∑–∞–ø–∏—Ç–æ–º –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö\n\n–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑: /sign_out')
                    return
                else:
                    db.mydb.commit()

                await message.answer(f'‚ùå {user_name} –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —á–µ—Ä–≥–∏')
            else:
                await message.answer(f'üëåüèº –í–∏ —ñ —Ç–∞–∫ –Ω–µ –±—É–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ñ –≤ —á–µ—Ä–≥—É –Ω–∞ {subject}')
        else:
            await message.answer(f'ü´• –î–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject} —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–∞ —á–µ—Ä–≥–∞'
                                 f'\n\n–°—Ç–≤–æ—Ä–∏—Ç–∏ —á–µ—Ä–≥—É: /create_queue')
    else:
        await message.answer(f'‚ùì –ü—Ä–µ–¥–º–µ—Ç {subject} –Ω–µ–≤—ñ–¥–æ–º–∏–π'
                             f'\n\n–î–æ–¥–∞—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç: /add_subject')
    return


def check_database(message: types.Message):
    group_id = str(message.chat.id)
    query = f'SELECT * FROM `{group_id}`.`System_settings`;'
    try:
        db.my_cursor.execute(query)
    except mysql.connector.ProgrammingError:  # —è–∫—â–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –Ω–µ —ñ—Å–Ω—É—î
        return False
    else:
        db.my_cursor.fetchall()  # –≤—Å–µ –æ–¥–Ω–æ —Ñ–µ—Ç—á–∏–º–æ, —â–æ–± –Ω–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É unread result found, –∞–ª–µ –Ω—ñ–¥–µ –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ
        return True


@dp.message_handler(commands='start')
async def start(message: types.Message):
    group_id = str(message.chat.id)

    print(group_id)  # —Ç–∏–º—á–∞—Å–æ–≤–æ (—Ç–µ—Ö–Ω—ñ—á–Ω–æ)

    is_group = True if group_id[0] == '-' else False
    if not is_group:
        await message.answer(f"üòä {message.from_user.first_name}, —è –ø—Ä–∞—Ü—é—é –ª–∏—à–µ –≤ –≥—Ä—É–ø–∞—Ö. –î–æ–¥–∞–π –º–µ–Ω–µ –≤ –≥—Ä—É–ø—É")
        return

    if not check_database(message):
        try:
            db.start_settings()
            db.create_database(group_id)
            db.create_tables(group_id)
            db.end_settings()
        except Exception as error:
            print('Cause: {}'.format(error))
        else:
            await message.answer(f"ü´° –†–æ–∑–ø–æ—á–∏–Ω–∞—é —Ä–æ–±–æ—Ç—É –≤ –≥—Ä—É–ø—ñ {message.chat.title}")

        print(f'\nAll tables for group \033[4m{message.chat.title}\033[0m\033[92m are ready')
        print(f'\n\033[1mBOT STARTED FOR GROUP \033[4m{message.chat.title}\n\033[0m')
    else:
        await message.answer(f"üòâ –Ø –≤–∂–µ –ø—Ä–∞—Ü—é—é –≤ —Ü—ñ–π –≥—Ä—É–ø—ñ. –ú–æ–∂–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –º–Ω–æ—é")
    return

if __name__ == '__main__':
    try:
        print('\033[93mInitializing database server...\n')
        db.connect_to_server()
        print('\033[92mSuccessfully connected to the database server\n')

        executor.start_polling(dp, skip_updates=True)
    except Exception as error:
        print('Cause: {}'.format(error))
